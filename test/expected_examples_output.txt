====== advent_of_code_2021_day_2.lox =====
___ TYPES ___
0:5 - 0:9      fold: a, (a, b -> a), List[b] -> a
0:11 - 0:14    map: (c -> d), List[c] -> List[d]
0:16 - 0:20    join: List[String] -> String
0:24 - 0:30    util/lists.lox: {plus: Num, Num -> Num, elements: List[e] -> .err(.empty_list) | .ok({first: e, rest: List[e]}), fold: h, (h, i -> h), List[i] -> h, try_fold: j, (j, k -> .err(l) | .ok(j)), List[k] -> .err(l) | .ok(j), map: (m -> n), List[m] -> List[n], reduce: (o, o -> o), List[o] -> .err(.empty_list) | .ok(o), reverse: List[r] -> List[r], where: (s -> Bool), List[s] -> List[s], enumerated: List[t] -> List[{element: t, index: Num}], count_where: (u -> Bool), List[u] -> Num, sort: List[Num] -> List[Num], zip: List[v], List[w], (v, w -> x) -> List[x], zip_with_tail: (y, y -> z), List[y] -> List[z], sum: List[Num] -> .err(.empty_list) | .ok(Num), fold_until: cc, (cc, dd -> .break(cc) | .continue(cc)), List[dd] -> cc, any: (ee -> Bool), List[ee] -> Bool, all: (ff -> Bool), List[ff] -> Bool, drop_at: Num, List[gg] -> List[gg], join: List[String] -> String, element_at: Num, List[hh] -> .err(.out_of_bounds) | .ok(hh), length: List[kk] -> Num}
0:31 - 0:47    util/lists.lox: {plus: Num, Num -> Num, elements: List[e] -> .err(.empty_list) | .ok({first: e, rest: List[e]}), fold: h, (h, i -> h), List[i] -> h, try_fold: j, (j, k -> .err(l) | .ok(j)), List[k] -> .err(l) | .ok(j), map: (m -> n), List[m] -> List[n], reduce: (o, o -> o), List[o] -> .err(.empty_list) | .ok(o), reverse: List[r] -> List[r], where: (s -> Bool), List[s] -> List[s], enumerated: List[t] -> List[{element: t, index: Num}], count_where: (u -> Bool), List[u] -> Num, sort: List[Num] -> List[Num], zip: List[v], List[w], (v, w -> x) -> List[x], zip_with_tail: (y, y -> z), List[y] -> List[z], sum: List[Num] -> .err(.empty_list) | .ok(Num), fold_until: cc, (cc, dd -> .break(cc) | .continue(cc)), List[dd] -> cc, any: (ee -> Bool), List[ee] -> Bool, all: (ff -> Bool), List[ff] -> Bool, drop_at: Num, List[gg] -> List[gg], join: List[String] -> String, element_at: Num, List[hh] -> .err(.out_of_bounds) | .ok(hh), length: List[kk] -> Num}
2:4 - 2:9      input: List[{arg1: String, arg2: Num}]
9:0 - 9:1      [...]: List[{arg1: String, arg2: Num}]
3:29 - 3:30    {...}: {arg1: String, arg2: Num}
3:5 - 3:9      arg1: String
3:22 - 3:26    arg2: Num
4:29 - 4:30    {...}: {arg1: String, arg2: Num}
4:5 - 4:9      arg1: String
4:22 - 4:26    arg2: Num
5:29 - 5:30    {...}: {arg1: String, arg2: Num}
5:5 - 5:9      arg1: String
5:22 - 5:26    arg2: Num
6:29 - 6:30    {...}: {arg1: String, arg2: Num}
6:5 - 6:9      arg1: String
6:22 - 6:26    arg2: Num
7:29 - 7:30    {...}: {arg1: String, arg2: Num}
7:5 - 7:9      arg1: String
7:22 - 7:26    arg2: Num
8:29 - 8:30    {...}: {arg1: String, arg2: Num}
8:5 - 8:9      arg1: String
8:22 - 8:26    arg2: Num
11:4 - 11:12   scale_by: Num, {x: Num, y: Num} -> {x: Num, y: Num}
11:23 - 11:25  Num, {x: Num, y: Num} -> {x: Num, y: Num}
11:34 - 11:36  {x: Num, y: Num} -> {x: Num, y: Num}
14:0 - 14:1    {...}: {x: Num, y: Num}
12:4 - 12:5    x: Num
12:9 - 12:10   *: Num
12:7 - 12:8    x: Num
12:11 - 12:17  factor: Num
13:4 - 13:5    y: Num
13:9 - 13:10   *: Num
13:7 - 13:8    y: Num
13:11 - 13:17  factor: Num
11:28 - 11:29  x: Num
11:31 - 11:32  y: Num
11:16 - 11:22  factor: Num
16:4 - 16:7    add: {y: Num, x: Num}, {y: Num, x: Num} -> {x: Num, y: Num}
16:16 - 16:18  {y: Num, x: Num}, {y: Num, x: Num} -> {x: Num, y: Num}
19:0 - 19:1    {...}: {x: Num, y: Num}
17:4 - 17:5    x: Num
17:11 - 17:12  +: Num
17:9 - 17:10   x: Num
17:7 - 17:8    a: {y: Num, x: Num}
17:15 - 17:16  x: Num
17:13 - 17:14  b: {y: Num, x: Num}
18:4 - 18:5    y: Num
18:11 - 18:12  +: Num
18:9 - 18:10   y: Num
18:7 - 18:8    a: {y: Num, x: Num}
18:15 - 18:16  y: Num
18:13 - 18:14  b: {y: Num, x: Num}
16:11 - 16:12  a: {y: Num, x: Num}
16:14 - 16:15  b: {y: Num, x: Num}
25:4 - 25:24   offset_for_direction: String -> {y: Num, x: Num}
25:32 - 25:33  String -> {y: Num, x: Num}
31:0 - 31:1    String -> {y: Num, x: Num}
25:28 - 25:31  dir: String
26:11 - 26:13  ==: Bool
26:7 - 26:10   dir: String
26:29 - 26:35  {y: Num, x: Num}
26:48 - 26:49  {...}: {y: Num, x: Num}
26:37 - 26:38  y: Num
26:40 - 26:41  -: Num
26:44 - 26:45  x: Num
27:11 - 27:13  ==: Bool
27:7 - 27:10   dir: String
27:29 - 27:35  {y: Num, x: Num}
27:47 - 27:48  {...}: {y: Num, x: Num}
27:37 - 27:38  y: Num
27:43 - 27:44  x: Num
28:11 - 28:13  ==: Bool
28:7 - 28:10   dir: String
28:29 - 28:35  {y: Num, x: Num}
28:47 - 28:48  {...}: {y: Num, x: Num}
28:37 - 28:38  y: Num
28:43 - 28:44  x: Num
29:4 - 29:9    print: String
29:67 - 29:69  \>: String
29:65 - 29:66  [...]: List[String]
29:35 - 29:38  dir: String
29:70 - 29:74  join: List[String] -> String
30:4 - 30:10   {y: Num, x: Num}
30:22 - 30:23  {...}: {y: Num, x: Num}
30:12 - 30:13  y: Num
30:18 - 30:19  x: Num
33:4 - 33:15   to_movement: {arg2: Num, arg1: String} -> {x: Num, y: Num}
33:25 - 33:27  {arg2: Num, arg1: String} -> {x: Num, y: Num}
35:4 - 35:6    \>: {x: Num, y: Num}
34:35 - 34:36  {y: Num, x: Num}
34:4 - 34:24   offset_for_direction: String -> {y: Num, x: Num}
34:31 - 34:35  arg1: String
34:25 - 34:30  instr: {arg2: Num, arg1: String}
35:26 - 35:27  {x: Num, y: Num} -> {x: Num, y: Num}
35:7 - 35:15   scale_by: Num, {x: Num, y: Num} -> {x: Num, y: Num}
35:22 - 35:26  arg2: Num
35:16 - 35:21  instr: {arg2: Num, arg1: String}
33:19 - 33:24  instr: {arg2: Num, arg1: String}
38:4 - 38:10   part_1: Num
41:4 - 41:6    \>: Num
40:4 - 40:6    \>: {y: Num, x: Num}
39:4 - 39:6    \>: List[{x: Num, y: Num}]
38:13 - 38:18  input: List[{arg1: String, arg2: Num}]
39:22 - 39:23  List[{arg2: Num, arg1: String}] -> List[{x: Num, y: Num}]
39:7 - 39:10   map: ({arg2: Num, arg1: String} -> {x: Num, y: Num}), List[{arg2: Num, arg1: String}] -> List[{x: Num, y: Num}]
39:11 - 39:22  to_movement: {arg2: Num, arg1: String} -> {x: Num, y: Num}
40:29 - 40:30  List[{y: Num, x: Num}] -> {y: Num, x: Num}
40:7 - 40:11   fold: {y: Num, x: Num}, ({y: Num, x: Num}, {y: Num, x: Num} -> {y: Num, x: Num}), List[{y: Num, x: Num}] -> {y: Num, x: Num}
40:23 - 40:24  {...}: {y: Num, x: Num}
40:13 - 40:14  y: Num
40:19 - 40:20  x: Num
40:26 - 40:29  add: {y: Num, x: Num}, {y: Num, x: Num} -> {x: Num, y: Num}
41:15 - 41:17  {x: Num, y: Num} -> Num
41:20 - 41:21  *: Num
41:18 - 41:19  x: Num
41:22 - 41:23  y: Num
41:9 - 41:10   x: Num
41:12 - 41:13  y: Num
43:0 - 43:5    print: Num
43:6 - 43:12   part_1: Num
44:0 - 44:6    assert: Bool
44:14 - 44:16  ==: Bool
44:7 - 44:13   part_1: Num
48:4 - 48:10   update: .err(String) | .ok({pos: b, aim: Num}), {arg2: d, arg1: String} -> .err(String) | .ok({aim: Num, pos: {x: Num, y: Num}})
48:27 - 48:28  .err(String) | .ok({pos: b, aim: Num}), {arg2: d, arg1: String} -> .err(String) | .ok({aim: Num, pos: {x: Num, y: Num}})
78:0 - 78:1    .err(String) | .ok({pos: b, aim: Num}), {arg2: d, arg1: String} -> .err(String) | .ok({aim: Num, pos: {x: Num, y: Num}})
48:14 - 48:19  state: .err(String) | .ok({pos: b, aim: Num})
48:21 - 48:26  instr: {arg2: d, arg1: String}
50:9 - 50:12   aim: Num
50:14 - 50:17  pos: b
50:21 - 50:26  state: .err(String) | .ok({pos: b, aim: Num})
53:8 - 53:12   arg1: String
53:14 - 53:17  dir: String
54:8 - 54:12   arg2: d
54:14 - 54:17  mag: d
55:8 - 55:13   instr: {arg2: d, arg1: String}
59:11 - 59:13  ==: Bool
59:7 - 59:10   dir: String
59:26 - 59:32  .err(String) | .ok({aim: Num, pos: {x: Num, y: Num}})
59:34 - 59:36  ok: .err(String) | .ok({aim: Num, pos: {x: Num, y: Num}})
62:4 - 62:5    {...}: {aim: Num, pos: {x: Num, y: Num}}
60:8 - 60:11   aim: Num
60:17 - 60:18  +: Num
60:13 - 60:16  aim: Num
60:19 - 60:22  mag: Num
61:8 - 61:11   pos: {x: Num, y: Num}
61:8 - 61:11   pos: {x: Num, y: Num}
64:11 - 64:13  ==: Bool
64:7 - 64:10   dir: String
64:24 - 64:30  .err(String) | .ok({aim: Num, pos: {x: Num, y: Num}})
64:32 - 64:34  ok: .err(String) | .ok({aim: Num, pos: {x: Num, y: Num}})
67:4 - 67:5    {...}: {aim: Num, pos: {x: Num, y: Num}}
65:8 - 65:11   aim: Num
65:17 - 65:18  -: Num
65:13 - 65:16  aim: Num
65:19 - 65:22  mag: Num
66:8 - 66:11   pos: {x: Num, y: Num}
66:8 - 66:11   pos: {x: Num, y: Num}
69:11 - 69:13  ==: Bool
69:7 - 69:10   dir: String
69:29 - 69:35  .err(String) | .ok({aim: Num, pos: {x: Num, y: Num}})
69:37 - 69:39  ok: .err(String) | .ok({aim: Num, pos: {x: Num, y: Num}})
75:4 - 75:5    {...}: {aim: Num, pos: {x: Num, y: Num}}
70:8 - 70:11   aim: Num
70:8 - 70:11   aim: Num
71:8 - 71:11   pos: {x: Num, y: Num}
74:8 - 74:9    {...}: {x: Num, y: Num}
72:12 - 72:13  x: Num
72:21 - 72:22  +: Num
72:19 - 72:20  x: Num
72:15 - 72:18  pos: {x: Num}
72:23 - 72:26  mag: Num
73:12 - 73:13  y: Num
73:21 - 73:22  +: Num
73:19 - 73:20  y: Num
73:15 - 73:18  pos: {y: Num}
73:27 - 73:28  *: Num
73:23 - 73:26  mag: Num
73:29 - 73:32  aim: Num
77:4 - 77:10   .err(String) | .ok({aim: Num, pos: {x: Num, y: Num}})
77:12 - 77:15  err: .err(String) | .ok({aim: Num, pos: {x: Num, y: Num}})
77:73 - 77:75  \>: String
77:71 - 77:72  [...]: List[String]
77:41 - 77:44  dir: String
77:76 - 77:80  join: List[String] -> String
80:4 - 80:11   initial: .ok({aim: Num, pos: {x: Num, y: Num}})
80:15 - 80:17  ok: .ok({aim: Num, pos: {x: Num, y: Num}})
83:0 - 83:1    {...}: {aim: Num, pos: {x: Num, y: Num}}
81:4 - 81:7    aim: Num
82:4 - 82:7    pos: {x: Num, y: Num}
82:20 - 82:21  {...}: {x: Num, y: Num}
82:10 - 82:11  x: Num
82:16 - 82:17  y: Num
84:4 - 84:10   result: .err(String) | .ok({aim: Num, pos: {x: Num, y: Num}})
84:19 - 84:21  \>: .err(String) | .ok({aim: Num, pos: {x: Num, y: Num}})
84:13 - 84:18  input: List[{arg1: String, arg2: Num}]
84:42 - 84:43  List[{arg2: Num, arg1: String}] -> .err(String) | .ok({aim: Num, pos: {x: Num, y: Num}})
84:22 - 84:26  fold: .err(String) | .ok({aim: Num, pos: {x: Num, y: Num}}), (.err(String) | .ok({aim: Num, pos: {x: Num, y: Num}}), {arg2: Num, arg1: String} -> .err(String) | .ok({aim: Num, pos: {x: Num, y: Num}})), List[{arg2: Num, arg1: String}] -> .err(String) | .ok({aim: Num, pos: {x: Num, y: Num}})
84:27 - 84:34  initial: .err(String) | .ok({aim: Num, pos: {x: Num, y: Num}})
84:36 - 84:42  update: .err(String) | .ok({pos: {x: Num, y: Num}, aim: Num}), {arg2: Num, arg1: String} -> .err(String) | .ok({aim: Num, pos: {x: Num, y: Num}})
85:4 - 85:10   part_2: Num
85:13 - 85:18  match: Num
85:19 - 85:25  result: .err(String) | .ok({aim: Num, pos: {x: Num, y: Num}})
86:5 - 86:7    ok: .ok({aim: Num, pos: {x: Num, y: Num}})
86:9 - 86:12   pos: {x: Num, y: Num}
86:15 - 86:16  x: Num
86:18 - 86:19  y: Num
86:28 - 86:29  *: Num
86:26 - 86:27  x: Num
86:30 - 86:31  y: Num
87:5 - 87:8    err: .err(String)
87:9 - 87:11   _0: String
87:15 - 87:16  -: Num
90:0 - 90:5    print: Num
90:6 - 90:12   part_2: Num
91:0 - 91:6    assert: Bool
91:14 - 91:16  ==: Bool
91:7 - 91:13   part_2: Num
___ OUTPUT ___
150
900


====== advent_of_code_2024_day_1.lox =====
___ TYPES ___
0:5 - 0:9      fold: a, (a, b -> a), List[b] -> a
0:11 - 0:19    try_fold: c, (c, d -> .err(e) | .ok(c)), List[d] -> .err(e) | .ok(c)
0:21 - 0:32    count_where: (f -> Bool), List[f] -> Num
0:34 - 0:37    zip: List[g], List[h], (g, h -> i) -> List[i]
0:39 - 0:43    sort: List[Num] -> List[Num]
0:45 - 0:48    sum: List[Num] -> .err(.empty_list) | .ok(Num)
0:50 - 0:58    elements: List[l] -> .err(.empty_list) | .ok({first: l, rest: List[l]})
0:60 - 0:70    element_at: Num, List[o] -> .err(.out_of_bounds) | .ok(o)
0:74 - 0:80    util/lists.lox: {plus: Num, Num -> Num, elements: List[r] -> .err(.empty_list) | .ok({first: r, rest: List[r]}), fold: u, (u, v -> u), List[v] -> u, try_fold: w, (w, x -> .err(y) | .ok(w)), List[x] -> .err(y) | .ok(w), map: (z -> aa), List[z] -> List[aa], reduce: (bb, bb -> bb), List[bb] -> .err(.empty_list) | .ok(bb), reverse: List[ee] -> List[ee], where: (ff -> Bool), List[ff] -> List[ff], enumerated: List[gg] -> List[{element: gg, index: Num}], count_where: (hh -> Bool), List[hh] -> Num, sort: List[Num] -> List[Num], zip: List[ii], List[jj], (ii, jj -> kk) -> List[kk], zip_with_tail: (ll, ll -> mm), List[ll] -> List[mm], sum: List[Num] -> .err(.empty_list) | .ok(Num), fold_until: pp, (pp, qq -> .break(pp) | .continue(pp)), List[qq] -> pp, any: (rr -> Bool), List[rr] -> Bool, all: (ss -> Bool), List[ss] -> Bool, drop_at: Num, List[tt] -> List[tt], join: List[String] -> String, element_at: Num, List[o] -> .err(.out_of_bounds) | .ok(o), length: List[uu] -> Num}
0:81 - 0:97    util/lists.lox: {plus: Num, Num -> Num, elements: List[r] -> .err(.empty_list) | .ok({first: r, rest: List[r]}), fold: u, (u, v -> u), List[v] -> u, try_fold: w, (w, x -> .err(y) | .ok(w)), List[x] -> .err(y) | .ok(w), map: (z -> aa), List[z] -> List[aa], reduce: (bb, bb -> bb), List[bb] -> .err(.empty_list) | .ok(bb), reverse: List[ee] -> List[ee], where: (ff -> Bool), List[ff] -> List[ff], enumerated: List[gg] -> List[{element: gg, index: Num}], count_where: (hh -> Bool), List[hh] -> Num, sort: List[Num] -> List[Num], zip: List[ii], List[jj], (ii, jj -> kk) -> List[kk], zip_with_tail: (ll, ll -> mm), List[ll] -> List[mm], sum: List[Num] -> .err(.empty_list) | .ok(Num), fold_until: pp, (pp, qq -> .break(pp) | .continue(pp)), List[qq] -> pp, any: (rr -> Bool), List[rr] -> Bool, all: (ss -> Bool), List[ss] -> Bool, drop_at: Num, List[tt] -> List[tt], join: List[String] -> String, element_at: Num, List[o] -> .err(.out_of_bounds) | .ok(o), length: List[uu] -> Num}
1:5 - 1:13     abs_diff: Num, Num -> Num
1:17 - 1:23    util/numeric.lox: {abs_diff: Num, Num -> Num, abs: Num -> Num, plus: Num, Num -> Num, minus: Num, Num -> Num, sign: Num -> Num}
1:24 - 1:42    util/numeric.lox: {abs_diff: Num, Num -> Num, abs: Num -> Num, plus: Num, Num -> Num, minus: Num, Num -> Num, sign: Num -> Num}
2:5 - 2:7      eq: a, a -> Bool
2:11 - 2:17    util/functions.lox: {eq: a, a -> Bool}
2:18 - 2:38    util/functions.lox: {eq: a, a -> Bool}
4:4 - 4:9      input: List[List[Num]]
11:0 - 11:1    [...]: List[List[Num]]
5:9 - 5:10     [...]: List[Num]
6:9 - 6:10     [...]: List[Num]
7:9 - 7:10     [...]: List[Num]
8:9 - 8:10     [...]: List[Num]
9:9 - 9:10     [...]: List[Num]
10:9 - 10:10   [...]: List[Num]
13:4 - 13:11   initial: {list1: List[a], list2: List[b]}
13:35 - 13:36  {...}: {list1: List[a], list2: List[b]}
13:15 - 13:20  list1: List[a]
13:23 - 13:24  [...]: List[a]
13:26 - 13:31  list2: List[b]
13:34 - 13:35  [...]: List[b]
14:5 - 14:10   list1: List[Num]
14:12 - 14:17  list2: List[Num]
14:27 - 14:29  \>: .err(.out_of_bounds) | .ok({list1: List[Num], list2: List[Num]})
14:21 - 14:26  input: List[List[Num]]
25:0 - 25:1    List[List[Num]] -> .err(.out_of_bounds) | .ok({list1: List[Num], list2: List[Num]})
14:30 - 14:38  try_fold: {list1: List[Num], list2: List[Num]}, ({list1: List[Num], list2: List[Num]}, List[Num] -> .err(.out_of_bounds) | .ok({list1: List[Num], list2: List[Num]})), List[List[Num]] -> .err(.out_of_bounds) | .ok({list1: List[Num], list2: List[Num]})
15:4 - 15:11   initial: {list1: List[Num], list2: List[Num]}
16:17 - 16:18  {list2: List[Num], list1: List[Num]}, List[Num] -> .err(.out_of_bounds) | .ok({list1: List[Num], list2: List[Num]})
24:4 - 24:5    {list2: List[Num], list1: List[Num]}, List[Num] -> .err(.out_of_bounds) | .ok({list1: List[Num], list2: List[Num]})
16:5 - 16:10   state: {list2: List[Num], list1: List[Num]}
16:12 - 16:16  pair: List[Num]
17:11 - 17:16  list1: List[Num]
17:18 - 17:23  list2: List[Num]
17:27 - 17:32  state: {list2: List[Num], list1: List[Num]}
18:10 - 18:14  left: .err(.out_of_bounds) | .ok(Num)
18:22 - 18:24  \>: .err(.out_of_bounds) | .ok(Num)
18:17 - 18:21  pair: List[Num]
18:37 - 18:38  List[Num] -> .err(.out_of_bounds) | .ok(Num)
18:25 - 18:35  element_at: Num, List[Num] -> .err(.out_of_bounds) | .ok(Num)
19:10 - 19:15  right: .err(.out_of_bounds) | .ok(Num)
19:23 - 19:25  \>: .err(.out_of_bounds) | .ok(Num)
19:18 - 19:22  pair: List[Num]
19:38 - 19:39  List[Num] -> .err(.out_of_bounds) | .ok(Num)
19:26 - 19:36  element_at: Num, List[Num] -> .err(.out_of_bounds) | .ok(Num)
20:6 - 20:12   .err(.out_of_bounds) | .ok({list1: List[Num], list2: List[Num]})
20:14 - 20:16  ok: .err(.out_of_bounds) | .ok({list1: List[Num], list2: List[Num]})
23:6 - 23:7    {...}: {list1: List[Num], list2: List[Num]}
21:8 - 21:13   list1: List[Num]
21:30 - 21:31  [...]: List[Num]
21:18 - 21:23  list1: List[Num]
21:25 - 21:29  left: .err(.out_of_bounds) | .ok(Num)
22:8 - 22:13   list2: List[Num]
22:31 - 22:32  [...]: List[Num]
22:18 - 22:23  list2: List[Num]
22:25 - 22:30  right: .err(.out_of_bounds) | .ok(Num)
25:5 - 25:12   initial: {list1: List[Num], list2: List[Num]}
27:0 - 27:5    print: List[Num]
27:6 - 27:11   list1: List[Num]
28:0 - 28:5    print: List[Num]
28:6 - 28:11   list2: List[Num]
32:4 - 32:11   answer1: .err(.empty_list) | .ok(Num)
36:2 - 36:4    \>: .err(.empty_list) | .ok(Num)
36:0 - 36:1    List[Num]
32:14 - 32:17  zip: List[Num], List[Num], (Num, Num -> Num) -> List[Num]
33:8 - 33:10   \>: List[Num]
33:2 - 33:7    list1: List[Num]
33:11 - 33:15  sort: List[Num] -> List[Num]
34:8 - 34:10   \>: List[Num]
34:2 - 34:7    list2: List[Num]
34:11 - 34:15  sort: List[Num] -> List[Num]
35:2 - 35:10   abs_diff: Num, Num -> Num
36:5 - 36:8    sum: List[Num] -> .err(.empty_list) | .ok(Num)
38:0 - 38:6    assert: Bool
38:15 - 38:17  ==: Bool
38:7 - 38:14   answer1: .err(.empty_list) | .ok(Num)
38:19 - 38:21  ok: .err(.empty_list) | .ok(Num)
42:4 - 42:32   frequency_of_number_in_list2: Num -> Num
42:38 - 42:40  Num -> Num
43:10 - 43:12  \>: Num
43:4 - 43:9    list2: List[Num]
43:32 - 43:33  List[Num] -> Num
43:13 - 43:24  count_where: (Num -> Bool), List[Num] -> Num
43:27 - 43:29  \>: Num -> Bool
43:25 - 43:26  n: Num
43:30 - 43:32  eq: Num, Num -> Bool
42:36 - 42:37  n: Num
45:4 - 45:11   answer2: Num
45:20 - 45:22  \>: Num
45:14 - 45:19  list1: List[Num]
48:1 - 48:2    List[Num] -> Num
45:23 - 45:27  fold: Num, (Num, Num -> Num), List[Num] -> Num
45:43 - 45:44  Num, Num -> Num
48:0 - 48:1    Num, Num -> Num
45:32 - 45:39  running: Num
45:41 - 45:42  n: Num
46:8 - 46:13   value: Num
46:18 - 46:19  *: Num
46:16 - 46:17  n: Num
46:50 - 46:51  Num
46:20 - 46:48  frequency_of_number_in_list2: Num -> Num
46:49 - 46:50  n: Num
47:4 - 47:10   Num
47:19 - 47:20  +: Num
47:11 - 47:18  running: Num
47:21 - 47:26  value: Num
50:0 - 50:6    assert: Bool
50:15 - 50:17  ==: Bool
50:7 - 50:14   answer2: Num
___ OUTPUT ___
[3, 4, 2, 1, 3, 3]
[4, 3, 5, 3, 9, 3]


====== advent_of_code_2024_day_2.lox =====
___ TYPES ___
0:5 - 0:13     elements: List[a] -> .err(.empty_list) | .ok({first: a, rest: List[a]})
0:15 - 0:28    zip_with_tail: (d, d -> e), List[d] -> List[e]
0:30 - 0:41    count_where: (f -> Bool), List[f] -> Num
0:43 - 0:46    all: (g -> Bool), List[g] -> Bool
0:48 - 0:58    enumerated: List[h] -> List[{element: h, index: Num}]
0:60 - 0:70    fold_until: i, (i, j -> .break(i) | .continue(i)), List[j] -> i
0:72 - 0:79    drop_at: Num, List[k] -> List[k]
0:81 - 0:84    map: (l -> m), List[l] -> List[m]
0:86 - 0:89    any: (n -> Bool), List[n] -> Bool
0:93 - 0:99    util/lists.lox: {plus: Num, Num -> Num, elements: List[o] -> .err(.empty_list) | .ok({first: o, rest: List[o]}), fold: r, (r, s -> r), List[s] -> r, try_fold: t, (t, u -> .err(v) | .ok(t)), List[u] -> .err(v) | .ok(t), map: (w -> x), List[w] -> List[x], reduce: (y, y -> y), List[y] -> .err(.empty_list) | .ok(y), reverse: List[bb] -> List[bb], where: (cc -> Bool), List[cc] -> List[cc], enumerated: List[dd] -> List[{element: dd, index: Num}], count_where: (ee -> Bool), List[ee] -> Num, sort: List[Num] -> List[Num], zip: List[ff], List[gg], (ff, gg -> hh) -> List[hh], zip_with_tail: (ii, ii -> jj), List[ii] -> List[jj], sum: List[Num] -> .err(.empty_list) | .ok(Num), fold_until: mm, (mm, nn -> .break(mm) | .continue(mm)), List[nn] -> mm, any: (n -> Bool), List[n] -> Bool, all: (oo -> Bool), List[oo] -> Bool, drop_at: Num, List[pp] -> List[pp], join: List[String] -> String, element_at: Num, List[qq] -> .err(.out_of_bounds) | .ok(qq), length: List[tt] -> Num}
0:100 - 0:116  util/lists.lox: {plus: Num, Num -> Num, elements: List[o] -> .err(.empty_list) | .ok({first: o, rest: List[o]}), fold: r, (r, s -> r), List[s] -> r, try_fold: t, (t, u -> .err(v) | .ok(t)), List[u] -> .err(v) | .ok(t), map: (w -> x), List[w] -> List[x], reduce: (y, y -> y), List[y] -> .err(.empty_list) | .ok(y), reverse: List[bb] -> List[bb], where: (cc -> Bool), List[cc] -> List[cc], enumerated: List[dd] -> List[{element: dd, index: Num}], count_where: (ee -> Bool), List[ee] -> Num, sort: List[Num] -> List[Num], zip: List[ff], List[gg], (ff, gg -> hh) -> List[hh], zip_with_tail: (ii, ii -> jj), List[ii] -> List[jj], sum: List[Num] -> .err(.empty_list) | .ok(Num), fold_until: mm, (mm, nn -> .break(mm) | .continue(mm)), List[nn] -> mm, any: (n -> Bool), List[n] -> Bool, all: (oo -> Bool), List[oo] -> Bool, drop_at: Num, List[pp] -> List[pp], join: List[String] -> String, element_at: Num, List[qq] -> .err(.out_of_bounds) | .ok(qq), length: List[tt] -> Num}
1:5 - 1:10     minus: Num, Num -> Num
1:12 - 1:16    sign: Num -> Num
1:18 - 1:21    abs: Num -> Num
1:25 - 1:31    util/numeric.lox: {abs_diff: Num, Num -> Num, abs: Num -> Num, plus: Num, Num -> Num, minus: Num, Num -> Num, sign: Num -> Num}
1:32 - 1:50    util/numeric.lox: {abs_diff: Num, Num -> Num, abs: Num -> Num, plus: Num, Num -> Num, minus: Num, Num -> Num, sign: Num -> Num}
3:4 - 3:9      input: List[List[Num]]
10:0 - 10:1    [...]: List[List[Num]]
4:18 - 4:19    [...]: List[Num]
5:18 - 5:19    [...]: List[Num]
6:18 - 6:19    [...]: List[Num]
7:18 - 7:19    [...]: List[Num]
8:18 - 8:19    [...]: List[Num]
9:18 - 9:19    [...]: List[Num]
12:4 - 12:11   is_safe: List[Num] -> Bool
12:20 - 12:21  List[Num] -> Bool
24:0 - 24:1    List[Num] -> Bool
12:15 - 12:19  list: List[Num]
13:8 - 13:13   diffs: List[Num]
13:21 - 13:23  \>: List[Num]
13:16 - 13:20  list: List[Num]
13:43 - 13:44  List[Num] -> List[Num]
13:24 - 13:37  zip_with_tail: (Num, Num -> Num), List[Num] -> List[Num]
13:38 - 13:43  minus: Num, Num -> Num
14:8 - 14:23   first_direction: Num
14:26 - 14:31  match: Num
14:38 - 14:40  \>: .err(.empty_list) | .ok({first: Num, rest: List[Num]})
14:32 - 14:37  diffs: List[Num]
14:41 - 14:49  elements: List[Num] -> .err(.empty_list) | .ok({first: Num, rest: List[Num]})
15:9 - 15:12   err: .err(.empty_list)
15:13 - 15:15  _0: .empty_list
15:19 - 15:25  Bool
16:9 - 16:11   ok: .ok({rest: List[Num], first: Num})
16:13 - 16:18  first: Num
16:30 - 16:32  \>: Num
16:24 - 16:29  first: Num
16:33 - 16:37  sign: Num -> Num
18:4 - 18:10   Bool
18:17 - 18:19  \>: Bool
18:11 - 18:16  diffs: List[Num]
23:4 - 23:5    List[Num] -> Bool
18:20 - 18:23  all: (Num -> Bool), List[Num] -> Bool
19:14 - 19:16  Num -> Bool
21:29 - 21:32  and: Bool
20:44 - 20:47  and: Bool
20:25 - 20:27  ==: Bool
20:17 - 20:19  \>: Num
20:12 - 20:16  diff: Num
20:20 - 20:24  sign: Num -> Num
20:28 - 20:43  first_direction: Num
21:24 - 21:26  >=: Bool
21:17 - 21:19  \>: Num
21:12 - 21:16  diff: Num
21:20 - 21:23  abs: Num -> Num
22:24 - 22:26  <=: Bool
22:17 - 22:19  \>: Num
22:12 - 22:16  diff: Num
22:20 - 22:23  abs: Num -> Num
19:9 - 19:13   diff: Num
28:4 - 28:10   part_1: Num
28:19 - 28:21  \>: Num
28:13 - 28:18  input: List[List[Num]]
28:41 - 28:42  List[List[Num]] -> Num
28:22 - 28:33  count_where: (List[Num] -> Bool), List[List[Num]] -> Num
28:34 - 28:41  is_safe: List[Num] -> Bool
29:0 - 29:5    print: Num
29:6 - 29:12   part_1: Num
30:0 - 30:6    assert: Bool
30:14 - 30:16  ==: Bool
30:7 - 30:13   part_1: Num
35:4 - 35:10   part_2: Num
35:19 - 35:21  \>: Num
35:13 - 35:18  input: List[List[Num]]
41:0 - 41:1    List[List[Num]] -> Num
35:22 - 35:33  count_where: (List[Num] -> Bool), List[List[Num]] -> Num
36:10 - 36:12  List[Num] -> Bool
37:24 - 37:26  or: Bool
37:13 - 37:15  \>: Bool
37:8 - 37:12   list: List[Num]
37:16 - 37:23  is_safe: List[Num] -> Bool
40:13 - 40:15  \>: Bool
39:13 - 39:15  \>: List[List[Num]]
38:13 - 38:15  \>: List[{element: Num, index: Num}]
38:8 - 38:12   list: List[Num]
38:16 - 38:26  enumerated: List[Num] -> List[{element: Num, index: Num}]
39:54 - 39:55  List[{element: Num, index: Num}] -> List[List[Num]]
39:16 - 39:19  map: ({element: Num, index: Num} -> List[Num]), List[{element: Num, index: Num}] -> List[List[Num]]
39:29 - 39:31  {element: Num, index: Num} -> List[Num]
39:37 - 39:39  \>: List[Num]
39:32 - 39:36  list: List[Num]
39:53 - 39:54  List[Num] -> List[Num]
39:40 - 39:47  drop_at: Num, List[Num] -> List[Num]
39:48 - 39:53  index: Num
39:22 - 39:27  index: Num
40:27 - 40:28  List[List[Num]] -> Bool
40:16 - 40:19  any: (List[Num] -> Bool), List[List[Num]] -> Bool
40:20 - 40:27  is_safe: List[Num] -> Bool
36:5 - 36:9    list: List[Num]
42:0 - 42:5    print: Num
42:6 - 42:12   part_2: Num
43:0 - 43:6    assert: Bool
43:14 - 43:16  ==: Bool
43:7 - 43:13   part_2: Num
___ OUTPUT ___
2
4


====== advent_of_code_2024_day_3.lox =====
___ TYPES ___
0:5 - 0:8      map: (a -> b), List[a] -> List[b]
0:10 - 0:13    sum: List[Num] -> .err(.empty_list) | .ok(Num)
0:17 - 0:23    util/lists.lox: {plus: Num, Num -> Num, elements: List[e] -> .err(.empty_list) | .ok({first: e, rest: List[e]}), fold: h, (h, i -> h), List[i] -> h, try_fold: j, (j, k -> .err(l) | .ok(j)), List[k] -> .err(l) | .ok(j), map: (m -> n), List[m] -> List[n], reduce: (o, o -> o), List[o] -> .err(.empty_list) | .ok(o), reverse: List[r] -> List[r], where: (s -> Bool), List[s] -> List[s], enumerated: List[t] -> List[{element: t, index: Num}], count_where: (u -> Bool), List[u] -> Num, sort: List[Num] -> List[Num], zip: List[v], List[w], (v, w -> x) -> List[x], zip_with_tail: (y, y -> z), List[y] -> List[z], sum: List[Num] -> .err(.empty_list) | .ok(Num), fold_until: aa, (aa, bb -> .break(aa) | .continue(aa)), List[bb] -> aa, any: (cc -> Bool), List[cc] -> Bool, all: (dd -> Bool), List[dd] -> Bool, drop_at: Num, List[ee] -> List[ee], join: List[String] -> String, element_at: Num, List[ff] -> .err(.out_of_bounds) | .ok(ff), length: List[ii] -> Num}
0:24 - 0:40    util/lists.lox: {plus: Num, Num -> Num, elements: List[e] -> .err(.empty_list) | .ok({first: e, rest: List[e]}), fold: h, (h, i -> h), List[i] -> h, try_fold: j, (j, k -> .err(l) | .ok(j)), List[k] -> .err(l) | .ok(j), map: (m -> n), List[m] -> List[n], reduce: (o, o -> o), List[o] -> .err(.empty_list) | .ok(o), reverse: List[r] -> List[r], where: (s -> Bool), List[s] -> List[s], enumerated: List[t] -> List[{element: t, index: Num}], count_where: (u -> Bool), List[u] -> Num, sort: List[Num] -> List[Num], zip: List[v], List[w], (v, w -> x) -> List[x], zip_with_tail: (y, y -> z), List[y] -> List[z], sum: List[Num] -> .err(.empty_list) | .ok(Num), fold_until: aa, (aa, bb -> .break(aa) | .continue(aa)), List[bb] -> aa, any: (cc -> Bool), List[cc] -> Bool, all: (dd -> Bool), List[dd] -> Bool, drop_at: Num, List[ee] -> List[ee], join: List[String] -> String, element_at: Num, List[ff] -> .err(.out_of_bounds) | .ok(ff), length: List[ii] -> Num}
1:5 - 1:10     split: {separator: String}, String -> List[String]
1:12 - 1:20    split_at: {separator: String}, String -> .err(.separator_not_found) | .ok({before: String, after: String})
1:22 - 1:31    parse_int: String -> .err(.invalid_digit(String)) | .ok(Num)
1:35 - 1:41    util/strings.lox: {fold: f, (f, g -> f), List[g] -> f, join: List[String] -> String, elements: List[h] -> .err(.empty_list) | .ok({first: h, rest: List[h]}), map: (k -> l), List[k] -> List[l], split: {separator: String}, String -> List[String], split_at: {separator: String}, String -> .err(.separator_not_found) | .ok({before: String, after: String}), as_digit: String -> .err(.invalid_digit(String)) | .ok(Num), parse_int: String -> .err(.invalid_digit(String)) | .ok(Num)}
1:42 - 1:60    util/strings.lox: {fold: f, (f, g -> f), List[g] -> f, join: List[String] -> String, elements: List[h] -> .err(.empty_list) | .ok({first: h, rest: List[h]}), map: (k -> l), List[k] -> List[l], split: {separator: String}, String -> List[String], split_at: {separator: String}, String -> .err(.separator_not_found) | .ok({before: String, after: String}), as_digit: String -> .err(.invalid_digit(String)) | .ok(Num), parse_int: String -> .err(.invalid_digit(String)) | .ok(Num)}
3:4 - 3:17     parse_operand: {until: String}, String -> .err(.invalid_digit(String) | .separator_not_found) | .ok({number: Num, rest: String})
3:40 - 3:42    {until: String}, String -> .err(.invalid_digit(String) | .separator_not_found) | .ok({number: Num, rest: String})
3:48 - 3:49    String -> .err(.invalid_digit(String) | .separator_not_found) | .ok({number: Num, rest: String})
7:0 - 7:1      String -> .err(.invalid_digit(String) | .separator_not_found) | .ok({number: Num, rest: String})
3:44 - 3:47    str: String
4:7 - 4:13     before: String
4:15 - 4:20    after: String
4:28 - 4:30    \>: .err(.invalid_digit(String) | .separator_not_found) | .ok({before: String, after: String})
4:24 - 4:27    str: String
4:51 - 4:52    String -> .err(.invalid_digit(String) | .separator_not_found) | .ok({before: String, after: String})
4:31 - 4:39    split_at: {separator: String}, String -> .err(.invalid_digit(String) | .separator_not_found) | .ok({before: String, after: String})
4:50 - 4:51    {...}: {separator: String}
4:41 - 4:50    separator: String
4:41 - 4:50    separator: String
5:6 - 5:12     number: Num
5:31 - 5:32    .err(.invalid_digit(String) | .separator_not_found) | .ok(Num)
5:15 - 5:24    parse_int: String -> .err(.invalid_digit(String) | .separator_not_found) | .ok(Num)
5:25 - 5:31    before: String
6:2 - 6:8      .err(.invalid_digit(String) | .separator_not_found) | .ok({number: Num, rest: String})
6:10 - 6:12    ok: .err(.invalid_digit(String) | .separator_not_found) | .ok({number: Num, rest: String})
6:33 - 6:34    {...}: {number: Num, rest: String}
6:14 - 6:20    number: Num
6:14 - 6:20    number: Num
6:22 - 6:26    rest: String
6:28 - 6:33    after: String
3:22 - 3:27    until: String
3:29 - 3:38    separator: String
9:4 - 9:19     compute_product: String -> .err(.empty_list) | .ok(Num)
9:27 - 9:29    String -> .err(.empty_list) | .ok(Num)
18:6 - 18:8    \>: .err(.empty_list) | .ok(Num)
17:6 - 17:8    \>: List[Num]
12:6 - 12:8    \>: List[.err(.invalid_digit(String) | .separator_not_found) | .ok(Num)]
11:6 - 11:8    \>: List[String]
10:4 - 10:7    str: String
11:34 - 11:35  String -> List[String]
11:9 - 11:14   split: {separator: String}, String -> List[String]
11:33 - 11:34  {...}: {separator: String}
11:16 - 11:25  separator: String
16:7 - 16:8    List[String] -> List[.err(.invalid_digit(String) | .separator_not_found) | .ok(Num)]
12:9 - 12:12   map: (String -> .err(.invalid_digit(String) | .separator_not_found) | .ok(Num)), List[String] -> List[.err(.invalid_digit(String) | .separator_not_found) | .ok(Num)]
12:19 - 12:20  String -> .err(.invalid_digit(String) | .separator_not_found) | .ok(Num)
16:6 - 16:7    String -> .err(.invalid_digit(String) | .separator_not_found) | .ok(Num)
12:14 - 12:18  part: String
13:13 - 13:19  number: Num
13:21 - 13:24  lhs: Num
13:26 - 13:30  rest: String
13:39 - 13:41  \>: .err(.invalid_digit(String) | .separator_not_found) | .ok({number: Num, rest: String})
13:34 - 13:38  part: String
13:68 - 13:69  String -> .err(.invalid_digit(String) | .separator_not_found) | .ok({number: Num, rest: String})
13:42 - 13:55  parse_operand: {until: String}, String -> .err(.invalid_digit(String) | .separator_not_found) | .ok({number: Num, rest: String})
13:67 - 13:68  {...}: {until: String}
13:57 - 13:62  until: String
14:13 - 14:19  number: Num
14:21 - 14:24  rhs: Num
14:33 - 14:35  \>: .err(.invalid_digit(String) | .separator_not_found) | .ok({number: Num, rest: String})
14:28 - 14:32  rest: String
14:62 - 14:63  String -> .err(.invalid_digit(String) | .separator_not_found) | .ok({number: Num, rest: String})
14:36 - 14:49  parse_operand: {until: String}, String -> .err(.invalid_digit(String) | .separator_not_found) | .ok({number: Num, rest: String})
14:61 - 14:62  {...}: {until: String}
14:51 - 14:56  until: String
15:8 - 15:14   .err(.invalid_digit(String) | .separator_not_found) | .ok(Num)
15:16 - 15:18  ok: .err(.invalid_digit(String) | .separator_not_found) | .ok(Num)
15:23 - 15:24  *: Num
15:19 - 15:22  lhs: Num
15:25 - 15:28  rhs: Num
17:37 - 17:38  List[.err(.invalid_digit(String) | .separator_not_found) | .ok(Num)] -> List[Num]
17:9 - 17:12   map: (.err(.invalid_digit(String) | .separator_not_found) | .ok(Num) -> Num), List[.err(.invalid_digit(String) | .separator_not_found) | .ok(Num)] -> List[Num]
17:22 - 17:24  .err(.invalid_digit(String) | .separator_not_found) | .ok(Num) -> Num
17:25 - 17:32  product: .err(.invalid_digit(String) | .separator_not_found) | .ok(Num)
17:14 - 17:21  product: .err(.invalid_digit(String) | .separator_not_found) | .ok(Num)
18:9 - 18:12   sum: List[Num] -> .err(.empty_list) | .ok(Num)
9:23 - 9:26    str: String
22:4 - 22:10   input1: String
23:4 - 23:10   part_1: a -> .err(.empty_list) | .ok(Num)
23:15 - 23:17  a -> .err(.empty_list) | .ok(Num)
23:40 - 23:41  .err(.empty_list) | .ok(Num)
23:18 - 23:33  compute_product: String -> .err(.empty_list) | .ok(Num)
23:34 - 23:40  input1: String
24:4 - 24:17   part_1_result: .err(.empty_list) | .ok(Num)
24:27 - 24:28  .err(.empty_list) | .ok(Num)
24:20 - 24:26  part_1: Unit -> .err(.empty_list) | .ok(Num)
25:0 - 25:5    print: .err(.empty_list) | .ok(Num)
25:6 - 25:19   part_1_result: .err(.empty_list) | .ok(Num)
26:0 - 26:6    assert: Bool
26:21 - 26:23  ==: Bool
26:7 - 26:20   part_1_result: .err(.empty_list) | .ok(Num)
26:25 - 26:27  ok: .err(.empty_list) | .ok(Num)
29:4 - 29:10   input2: String
30:4 - 30:10   part_2: a -> .err(.empty_list) | .ok(Num)
30:15 - 30:17  a -> .err(.empty_list) | .ok(Num)
40:2 - 40:4    \>: .err(.empty_list) | .ok(Num)
39:2 - 39:4    \>: List[Num]
33:2 - 33:4    \>: List[.err(.empty_list) | .ok(Num)]
32:2 - 32:4    \>: List[String]
31:0 - 31:6    input2: String
32:30 - 32:31  String -> List[String]
32:5 - 32:10   split: {separator: String}, String -> List[String]
32:29 - 32:30  {...}: {separator: String}
32:12 - 32:21  separator: String
38:5 - 38:6    List[String] -> List[.err(.empty_list) | .ok(Num)]
33:5 - 33:8    map: (String -> .err(.empty_list) | .ok(Num)), List[String] -> List[.err(.empty_list) | .ok(Num)]
33:15 - 33:17  String -> .err(.empty_list) | .ok(Num)
34:7 - 34:12   match: .err(.empty_list) | .ok(Num)
34:18 - 34:20  \>: .err(.separator_not_found) | .ok({before: String, after: String})
34:13 - 34:17  part: String
34:52 - 34:53  String -> .err(.separator_not_found) | .ok({before: String, after: String})
34:21 - 34:29  split_at: {separator: String}, String -> .err(.separator_not_found) | .ok({before: String, after: String})
34:51 - 34:52  {...}: {separator: String}
34:31 - 34:40  separator: String
35:10 - 35:12  ok: .ok({after: String, before: String})
35:14 - 35:20  before: String
35:48 - 35:49  .err(.empty_list) | .ok(Num)
35:26 - 35:41  compute_product: String -> .err(.empty_list) | .ok(Num)
35:42 - 35:48  before: String
36:10 - 36:13  err: .err(.separator_not_found)
36:14 - 36:16  _0: .separator_not_found
36:40 - 36:41  .err(.empty_list) | .ok(Num)
36:20 - 36:35  compute_product: String -> .err(.empty_list) | .ok(Num)
36:36 - 36:40  part: String
33:10 - 33:14  part: String
39:33 - 39:34  List[.err(.empty_list) | .ok(Num)] -> List[Num]
39:5 - 39:8    map: (.err(.empty_list) | .ok(Num) -> Num), List[.err(.empty_list) | .ok(Num)] -> List[Num]
39:18 - 39:20  .err(.empty_list) | .ok(Num) -> Num
39:21 - 39:28  product: .err(.empty_list) | .ok(Num)
39:10 - 39:17  product: .err(.empty_list) | .ok(Num)
40:5 - 40:8    sum: List[Num] -> .err(.empty_list) | .ok(Num)
42:4 - 42:17   part_2_result: .err(.empty_list) | .ok(Num)
42:27 - 42:28  .err(.empty_list) | .ok(Num)
42:20 - 42:26  part_2: Unit -> .err(.empty_list) | .ok(Num)
43:0 - 43:5    print: .err(.empty_list) | .ok(Num)
43:6 - 43:19   part_2_result: .err(.empty_list) | .ok(Num)
44:0 - 44:6    assert: Bool
44:21 - 44:23  ==: Bool
44:7 - 44:20   part_2_result: .err(.empty_list) | .ok(Num)
44:25 - 44:27  ok: .err(.empty_list) | .ok(Num)
___ OUTPUT ___
.ok(161)
.ok(48)


====== basic_test.lox =====
___ TYPES ___
0:4 - 0:24     zero_args_empty_body: a -> Unit
0:29 - 0:30    a -> Unit
0:31 - 0:32    a -> Unit
1:4 - 1:23     zero_args_no_return: a -> Unit
1:28 - 1:29    a -> Unit
1:39 - 1:40    a -> Unit
1:30 - 1:35    print: Num
2:4 - 2:25     zero_args_with_return: a -> Num
2:30 - 2:31    a -> Num
2:42 - 2:43    a -> Num
2:32 - 2:38    Num
3:4 - 3:23     zero_args_expr_body: a -> Num
3:28 - 3:30    a -> Num
5:4 - 5:22     one_arg_empty_body: a -> Unit
5:28 - 5:29    a -> Unit
5:30 - 5:31    a -> Unit
5:26 - 5:27    a: a
6:4 - 6:21     one_arg_no_return: a -> Unit
6:27 - 6:28    a -> Unit
6:38 - 6:39    a -> Unit
6:25 - 6:26    a: a
6:29 - 6:34    print: a
6:35 - 6:36    a: a
7:4 - 7:23     one_arg_with_return: a -> a
7:29 - 7:30    a -> a
7:41 - 7:42    a -> a
7:27 - 7:28    a: a
7:31 - 7:37    a
7:38 - 7:39    a: a
8:4 - 8:22     one_args_expr_body: a -> a
8:28 - 8:30    a -> a
8:31 - 8:32    a: a
8:26 - 8:27    a: a
10:4 - 10:23   two_args_empty_body: a, b -> Unit
10:32 - 10:33  a, b -> Unit
10:34 - 10:35  a, b -> Unit
10:27 - 10:28  a: a
10:30 - 10:31  b: b
11:4 - 11:22   two_args_no_return: a, b -> Unit
11:31 - 11:32  a, b -> Unit
11:51 - 11:52  a, b -> Unit
11:26 - 11:27  a: a
11:29 - 11:30  b: b
11:33 - 11:38  print: a
11:39 - 11:40  a: a
11:42 - 11:47  print: b
11:48 - 11:49  b: b
12:4 - 12:24   two_args_with_return: Num, Num -> Num
12:33 - 12:34  Num, Num -> Num
12:49 - 12:50  Num, Num -> Num
12:28 - 12:29  a: Num
12:31 - 12:32  b: Num
12:35 - 12:41  Num
12:44 - 12:45  +: Num
12:42 - 12:43  a: Num
12:46 - 12:47  b: Num
13:4 - 13:22   two_args_expr_body: Num, Num -> Num
13:31 - 13:33  Num, Num -> Num
13:36 - 13:37  +: Num
13:34 - 13:35  a: Num
13:38 - 13:39  b: Num
13:26 - 13:27  a: Num
13:29 - 13:30  b: Num
15:0 - 15:5    print: Unit
15:27 - 15:28  Unit
15:6 - 15:26   zero_args_empty_body: Unit -> Unit
16:0 - 16:5    print: Unit
16:26 - 16:27  Unit
16:6 - 16:25   zero_args_no_return: Unit -> Unit
17:0 - 17:5    print: Num
17:28 - 17:29  Num
17:6 - 17:27   zero_args_with_return: Unit -> Num
18:0 - 18:5    print: Num
18:26 - 18:27  Num
18:6 - 18:25   zero_args_expr_body: Unit -> Num
20:0 - 20:5    print: Unit
20:26 - 20:27  Unit
20:6 - 20:24   one_arg_empty_body: Num -> Unit
21:0 - 21:5    print: Unit
21:25 - 21:26  Unit
21:6 - 21:23   one_arg_no_return: Num -> Unit
22:0 - 22:5    print: Num
22:27 - 22:28  Num
22:6 - 22:25   one_arg_with_return: Num -> Num
23:0 - 23:5    print: Num
23:26 - 23:27  Num
23:6 - 23:24   one_args_expr_body: Num -> Num
25:0 - 25:5    print: Unit
25:30 - 25:31  Unit
25:6 - 25:25   two_args_empty_body: Num, Num -> Unit
26:0 - 26:5    print: Unit
26:29 - 26:30  Unit
26:6 - 26:24   two_args_no_return: Num, Num -> Unit
27:0 - 27:5    print: Num
27:31 - 27:32  Num
27:6 - 27:26   two_args_with_return: Num, Num -> Num
28:0 - 28:5    print: Num
28:29 - 28:30  Num
28:6 - 28:24   two_args_expr_body: Num, Num -> Num
30:4 - 30:14   assignment: String
31:0 - 31:5    print: String
31:6 - 31:16   assignment: String
33:4 - 33:12   is_great: a -> Bool
33:17 - 33:18  a -> Bool
36:0 - 36:1    a -> Bool
34:4 - 34:9    print: String
35:4 - 35:10   Bool
38:0 - 38:5    print: String
39:0 - 39:5    print: Bool
39:12 - 39:14  or: Bool
39:24 - 39:25  Bool
39:15 - 39:23  is_great: Unit -> Bool
41:0 - 41:5    print: String
42:0 - 42:5    print: Bool
42:12 - 42:15  and: Bool
42:25 - 42:26  Bool
42:16 - 42:24  is_great: Unit -> Bool
44:0 - 44:5    print: String
45:0 - 45:5    print: Bool
45:11 - 45:13  or: Bool
45:23 - 45:24  Bool
45:14 - 45:22  is_great: Unit -> Bool
47:0 - 47:5    print: String
48:0 - 48:5    print: Bool
48:11 - 48:14  and: Bool
48:24 - 48:25  Bool
48:15 - 48:23  is_great: Unit -> Bool
___ OUTPUT ___
null
1
null
1
1
null
1
null
1
1
null
1
2
null
3
3
assignment!
=== false or is_great(); ===
side effect!
true
=== false and is_great(); ===
false
=== true or is_great(); ===
true
=== true and is_great(); ===
side effect!
true


====== grab_bag.lox =====
___ TYPES ___
1:4 - 1:9      empty: List[a] -> Bool
1:17 - 1:22    empty: List[a] -> Bool
1:12 - 1:16    List: {first: List[b] -> b, rest: List[c] -> List[c], empty: List[a] -> Bool}
2:4 - 2:9      first: List[a] -> a
2:17 - 2:22    first: List[a] -> a
2:12 - 2:16    List: {first: List[a] -> a, rest: List[b] -> List[b], empty: List[c] -> Bool}
3:4 - 3:8      rest: List[a] -> List[a]
3:16 - 3:20    rest: List[a] -> List[a]
3:11 - 3:15    List: {first: List[b] -> b, rest: List[a] -> List[a], empty: List[c] -> Bool}
8:4 - 8:11     friends: List[String]
8:29 - 8:30    [...]: List[String]
9:4 - 9:10     family: List[String]
9:32 - 9:33    [...]: List[String]
10:4 - 10:10   people: List[String]
10:48 - 10:49  [...]: List[String]
10:23 - 10:30  friends: List[String]
10:42 - 10:48  family: List[String]
11:0 - 11:5    print: List[String]
11:17 - 11:18  List[String]
11:6 - 11:10   rest: List[String] -> List[String]
11:11 - 11:17  people: List[String]
16:4 - 16:8    boss: {name: String, company: String}
19:0 - 19:1    {...}: {name: String, company: String}
17:4 - 17:8    name: String
18:4 - 18:11   company: String
20:4 - 20:11   updated: {name: String, company: String, line_of_work: .refrigeration}
20:51 - 20:52  {...}: {name: String, company: String, line_of_work: .refrigeration}
20:17 - 20:21  boss: {name: String, company: String}
20:23 - 20:35  line_of_work: .refrigeration
20:38 - 20:51  refrigeration: .refrigeration
21:0 - 21:5    print: {name: String, company: String}
21:6 - 21:10   boss: {name: String, company: String}
22:0 - 22:5    print: String
22:14 - 22:21  company: String
22:6 - 22:13   updated: {name: String, company: String, line_of_work: .refrigeration}
24:2 - 24:6    name: String
25:2 - 25:14   line_of_work: .refrigeration
25:16 - 25:24  subtitle: .refrigeration
26:4 - 26:11   updated: {name: String, company: String, line_of_work: .refrigeration}
27:0 - 27:5    print: String
27:6 - 27:10   name: String
28:0 - 28:5    print: .refrigeration
28:6 - 28:14   subtitle: .refrigeration
33:4 - 33:9    green: .green
33:13 - 33:18  green: .green
34:4 - 34:7    red: .red
34:11 - 34:14  red: .red
35:4 - 35:10   either: .green | .red
35:18 - 35:19  ?: .green | .red
35:20 - 35:25  green: .green | .red
35:28 - 35:31  red: .green | .red
36:0 - 36:5    print: Num
36:6 - 36:11   match: Num
36:12 - 36:18  either: .green | .red
37:5 - 37:10   green: .green
38:5 - 38:8    red: .red
41:4 - 41:14   send_email: String -> .missing_subject | .network_error(Num) | .oom | .sent
41:20 - 41:21  String -> .missing_subject | .network_error(Num) | .oom | .sent
46:0 - 46:1    String -> .missing_subject | .network_error(Num) | .oom | .sent
41:18 - 41:19  x: String
42:7 - 42:9    ==: Bool
42:5 - 42:6    x: String
42:19 - 42:25  .missing_subject | .network_error(Num) | .oom | .sent
42:27 - 42:42  missing_subject: .missing_subject | .network_error(Num) | .oom | .sent
43:7 - 43:9    ==: Bool
43:5 - 43:6    x: String
43:19 - 43:25  .missing_subject | .network_error(Num) | .oom | .sent
43:27 - 43:40  network_error: .missing_subject | .network_error(Num) | .oom | .sent
44:7 - 44:9    ==: Bool
44:5 - 44:6    x: String
44:19 - 44:25  .missing_subject | .network_error(Num) | .oom | .sent
44:27 - 44:30  oom: .missing_subject | .network_error(Num) | .oom | .sent
45:2 - 45:8    .missing_subject | .network_error(Num) | .oom | .sent
45:10 - 45:14  sent: .missing_subject | .network_error(Num) | .oom | .sent
47:4 - 47:10   result: .alert(String) | .network_error(Num) | .oom
47:13 - 47:18  match: .alert(String) | .network_error(Num) | .oom
47:33 - 47:34  .alert(String) | .missing_subject | .network_error(Num) | .oom | .sent
47:19 - 47:29  send_email: String -> .alert(String) | .missing_subject | .network_error(Num) | .oom | .sent
48:3 - 48:7    sent: .sent
48:23 - 48:28  alert: .alert(String) | .network_error(Num) | .oom
49:3 - 49:18   missing_subject: .missing_subject
49:23 - 49:28  alert: .alert(String) | .network_error(Num) | .oom
50:2 - 50:15   something_bad: .alert(String) | .network_error(Num) | .oom
50:22 - 50:35  something_bad: .alert(String) | .network_error(Num) | .oom
56:4 - 56:7    sub: Num, Num -> Num
56:16 - 56:18  Num, Num -> Num
56:21 - 56:22  -: Num
56:19 - 56:20  x: Num
56:23 - 56:24  y: Num
56:11 - 56:12  x: Num
56:14 - 56:15  y: Num
57:0 - 57:5    print: Num
57:14 - 57:15  Num
57:6 - 57:9    sub: Num, Num -> Num
59:4 - 59:15   one_minus_x: Num -> Num
59:26 - 59:27  Num -> Num
59:25 - 59:26  _: <unknown>
59:18 - 59:21  sub: Num, Num -> Num
60:4 - 60:15   x_minus_one: Num -> Num
60:26 - 60:27  Num -> Num
60:22 - 60:23  _: <unknown>
60:18 - 60:21  sub: Num, Num -> Num
61:0 - 61:5    print: Num
61:19 - 61:20  Num
61:6 - 61:17   one_minus_x: Num -> Num
62:0 - 62:5    print: Num
62:19 - 62:20  Num
62:6 - 62:17   x_minus_one: Num -> Num
64:4 - 64:11   numbers: List[Num]
64:20 - 64:21  [...]: List[Num]
65:0 - 65:5    print: Num
65:23 - 65:25  \>: Num
65:14 - 65:16  \>: Num
65:6 - 65:13   numbers: List[Num]
65:17 - 65:22  first: List[Num] -> Num
65:34 - 65:35  Num -> Num
65:30 - 65:31  _: <unknown>
65:26 - 65:29  sub: Num, Num -> Num
67:4 - 67:13   make_user: {birth_year: Num, name: String} -> .anonymous | .user({user_id: Num, name: String, birth_year: Num, age: {as_of_year: Num} -> Num})
67:22 - 67:23  {birth_year: Num, name: String} -> .anonymous | .user({user_id: Num, name: String, birth_year: Num, age: {as_of_year: Num} -> Num})
79:0 - 79:1    {birth_year: Num, name: String} -> .anonymous | .user({user_id: Num, name: String, birth_year: Num, age: {as_of_year: Num} -> Num})
67:17 - 67:21  data: {birth_year: Num, name: String}
68:17 - 68:19  ==: Bool
68:12 - 68:16  name: String
68:7 - 68:11   data: {birth_year: Num, name: String}
69:8 - 69:13   print: String
70:8 - 70:14   .anonymous | .user({user_id: Num, name: String, birth_year: Num, age: {as_of_year: Num} -> Num})
70:16 - 70:25  anonymous: .anonymous | .user({user_id: Num, name: String, birth_year: Num, age: {as_of_year: Num} -> Num})
72:8 - 72:17   random_id: Num
73:4 - 73:10   .anonymous | .user({user_id: Num, name: String, birth_year: Num, age: {as_of_year: Num} -> Num})
73:12 - 73:16  user: .anonymous | .user({user_id: Num, name: String, birth_year: Num, age: {as_of_year: Num} -> Num})
78:4 - 78:5    {...}: {user_id: Num, name: String, birth_year: Num, age: {as_of_year: Num} -> Num}
74:8 - 74:15   user_id: Num
74:17 - 74:26  random_id: Num
75:8 - 75:12   name: String
75:19 - 75:23  name: String
75:14 - 75:18  data: {birth_year: Num, name: String}
76:8 - 76:18   birth_year: Num
76:25 - 76:35  birth_year: Num
76:20 - 76:24  data: {birth_year: Num, name: String}
77:8 - 77:11   age: {as_of_year: Num} -> Num
77:41 - 77:43  {as_of_year: Num} -> Num
77:57 - 77:58  -: Num
77:44 - 77:56  current_year: Num
77:64 - 77:74  birth_year: Num
77:59 - 77:63  data: {birth_year: Num, name: String}
77:15 - 77:25  as_of_year: Num
77:27 - 77:39  current_year: Num
80:4 - 80:8    user: .anonymous | .user({user_id: Num, name: String, birth_year: Num, age: {as_of_year: Num} -> Num})
80:52 - 80:53  .anonymous | .user({user_id: Num, name: String, birth_year: Num, age: {as_of_year: Num} -> Num})
80:11 - 80:20  make_user: {birth_year: Num, name: String} -> .anonymous | .user({user_id: Num, name: String, birth_year: Num, age: {as_of_year: Num} -> Num})
80:51 - 80:52  {...}: {name: String, birth_year: Num}
80:22 - 80:26  name: String
80:35 - 80:45  birth_year: Num
81:0 - 81:5    print: Num
81:6 - 81:11   match: Num
81:12 - 81:16  user: .anonymous | .user({user_id: Num, name: String, birth_year: Num, age: {as_of_year: Num} -> Num})
82:5 - 82:9    user: .user({user_id: Num, name: String, birth_year: Num, age: {as_of_year: Num} -> Num})
82:10 - 82:11  u: {user_id: Num, name: String, birth_year: Num, age: {as_of_year: Num} -> Num}
82:40 - 82:41  Num
82:18 - 82:21  age: {as_of_year: Num} -> Num
82:16 - 82:17  u: {user_id: Num, name: String, birth_year: Num, age: {as_of_year: Num} -> Num}
82:39 - 82:40  {...}: {as_of_year: Num}
82:23 - 82:33  as_of_year: Num
83:5 - 83:14   anonymous: .anonymous
___ OUTPUT ___
[alice, bob, john, charlie, devin]
{name: Bob Vance, company: Vance Refrigeration}
Vance Refrigeration
Bob Vance
.refrigeration
0
5
-2
2
0
51


====== if.lox =====
___ TYPES ___
1:9 - 1:11     or: Bool
1:5 - 1:6      >: Bool
2:4 - 2:9      print: String
3:7 - 3:12     print: Num
5:4 - 5:9      maybe: a -> Bool
5:14 - 5:15    a -> Bool
5:30 - 5:31    a -> Bool
5:16 - 5:22    Bool
7:11 - 7:13    or: Bool
7:9 - 7:10     Bool
7:3 - 7:8      maybe: Unit -> Bool
7:16 - 7:17    >: Bool
8:8 - 8:9      a: String
9:4 - 9:9      print: String
9:10 - 9:11    a: String
12:4 - 12:9    count: Num -> Unit
12:15 - 12:16  Num -> Unit
15:0 - 15:1    Num -> Unit
12:13 - 12:14  n: Num
13:9 - 13:10   >: Bool
13:7 - 13:8    n: Num
13:27 - 13:28  Unit
13:18 - 13:23  count: Num -> Unit
13:25 - 13:26  -: Num
13:24 - 13:25  n: Num
14:4 - 14:9    print: Num
14:10 - 14:11  n: Num
17:7 - 17:8    Unit
17:0 - 17:5    count: Num -> Unit
19:0 - 19:5    print: String
19:12 - 19:13  ?: String
19:8 - 19:9    >: Bool
___ OUTPUT ___
a
b
1
2
3
b


====== imports.lox =====
___ TYPES ___
0:5 - 0:8      map: (a -> b), List[a] -> List[b]
0:12 - 0:18    lists.lox: {map: (a -> b), List[a] -> List[b], reverse: List[c] -> List[c], reduce: (d, d -> d), List[d] -> .err(.empty_list) | .ok(d), xs: List[Num], ys: List[g], zs: List[Num], mixed: List[.hello(Num) | .tags({two: String})], employees: List[{name: String, age: Num}], employee_with_max_age: .err(.empty_list) | .ok({name: String, age: Num}), max_age: .err(.empty_list) | .ok(Num), max: Num, Num -> Num, min: Num, Num -> Num, sub: Num, Num -> Num, id: m -> m, one_minus_x: Num -> Num, x_minus_one: Num -> Num}
0:19 - 0:30    lists.lox: {map: (a -> b), List[a] -> List[b], reverse: List[c] -> List[c], reduce: (d, d -> d), List[d] -> .err(.empty_list) | .ok(d), xs: List[Num], ys: List[g], zs: List[Num], mixed: List[.hello(Num) | .tags({two: String})], employees: List[{name: String, age: Num}], employee_with_max_age: .err(.empty_list) | .ok({name: String, age: Num}), max_age: .err(.empty_list) | .ok(Num), max: Num, Num -> Num, min: Num, Num -> Num, sub: Num, Num -> Num, id: m -> m, one_minus_x: Num -> Num, x_minus_one: Num -> Num}
2:4 - 2:5      x: List[Num]
2:16 - 2:18    \>: List[Num]
2:14 - 2:15    [...]: List[Num]
2:34 - 2:35    List[Num] -> List[Num]
2:19 - 2:22    map: (Num -> Num), List[Num] -> List[Num]
2:26 - 2:28    Num -> Num
2:31 - 2:32    *: Num
2:29 - 2:30    n: Num
2:24 - 2:25    n: Num
3:0 - 3:5      print: List[Num]
3:6 - 3:7      x: List[Num]
5:0 - 5:5      print: {hello_from_relative: String}
5:6 - 5:12     foo/relative.lox: {hello_from_relative: String}
5:13 - 5:31    foo/relative.lox: {hello_from_relative: String}
6:4 - 6:7      rel: {hello_from_relative: String}
6:10 - 6:16    foo/relative.lox: {hello_from_relative: String}
6:17 - 6:35    foo/relative.lox: {hello_from_relative: String}
7:0 - 7:5      print: String
7:10 - 7:29    hello_from_relative: String
7:6 - 7:9      rel: {hello_from_relative: String}
9:0 - 9:5      print: Num
9:28 - 9:29    a: Num
9:7 - 9:13     foo/up.lox: {from_up: {map: (a -> b), List[a] -> List[b], reverse: List[c] -> List[c], reduce: (d, d -> d), List[d] -> .err(.empty_list) | .ok(d), xs: List[Num], ys: List[g], zs: List[Num], mixed: List[.hello(Num) | .tags({two: String})], employees: List[{name: String, age: Num}], employee_with_max_age: .err(.empty_list) | .ok({name: String, age: Num}), max_age: .err(.empty_list) | .ok(Num), max: Num, Num -> Num, min: Num, Num -> Num, sub: Num, Num -> Num, id: m -> m, one_minus_x: Num -> Num, x_minus_one: Num -> Num}, a: Num}
9:14 - 9:26    foo/up.lox: {from_up: {map: (a -> b), List[a] -> List[b], reverse: List[c] -> List[c], reduce: (d, d -> d), List[d] -> .err(.empty_list) | .ok(d), xs: List[Num], ys: List[g], zs: List[Num], mixed: List[.hello(Num) | .tags({two: String})], employees: List[{name: String, age: Num}], employee_with_max_age: .err(.empty_list) | .ok({name: String, age: Num}), max_age: .err(.empty_list) | .ok(Num), max: Num, Num -> Num, min: Num, Num -> Num, sub: Num, Num -> Num, id: m -> m, one_minus_x: Num -> Num, x_minus_one: Num -> Num}, a: Num}
___ OUTPUT ___
[2, 4, 6]
{hello_from_relative: yep}
yep
1


====== lambdas.lox =====
___ TYPES ___
0:4 - 0:6      fn: Num, Num -> Num
0:12 - 0:14    Num, Num -> Num
0:18 - 0:20    Num -> Num
0:23 - 0:24    +: Num
0:21 - 0:22    x: Num
0:25 - 0:26    y: Num
0:16 - 0:17    y: Num
0:10 - 0:11    x: Num
1:0 - 1:5      print: Num
1:14 - 1:15    Num
1:10 - 1:11    Num -> Num
1:6 - 1:8      fn: Num, Num -> Num
3:4 - 3:7      fn2: Num, Num, Num -> Num
3:13 - 3:15    Num, Num, Num -> Num
3:19 - 3:21    Num, Num -> Num
3:25 - 3:27    Num -> Num
3:34 - 3:35    +: Num
3:30 - 3:31    +: Num
3:28 - 3:29    x: Num
3:32 - 3:33    y: Num
3:36 - 3:37    z: Num
3:23 - 3:24    z: Num
3:17 - 3:18    y: Num
3:11 - 3:12    x: Num
4:0 - 4:5      print: Num
4:20 - 4:21    Num
4:15 - 4:16    Num -> Num
4:11 - 4:12    Num, Num -> Num
4:6 - 4:9      fn2: Num, Num, Num -> Num
6:0 - 6:5      print: Num
6:46 - 6:47    Num
6:41 - 6:42    Num -> Num
6:37 - 6:38    Num, Num -> Num
6:10 - 6:12    Num, Num, Num -> Num
6:16 - 6:18    Num, Num -> Num
6:22 - 6:24    Num -> Num
6:31 - 6:32    +: Num
6:27 - 6:28    +: Num
6:25 - 6:26    x: Num
6:29 - 6:30    y: Num
6:33 - 6:34    z: Num
6:20 - 6:21    z: Num
6:14 - 6:15    y: Num
6:8 - 6:9      x: Num
8:4 - 8:15     some_record: {a: Bool, b: a -> Num, c: Num -> Num, d: Num -> Num, e: b -> Num}
14:0 - 14:1    {...}: {a: Bool, b: a -> Num, c: Num -> Num, d: Num -> Num, e: b -> Num}
9:4 - 9:5      a: Bool
10:4 - 10:5    b: a -> Num
10:9 - 10:10   a -> Num
10:23 - 10:24  a -> Num
10:11 - 10:17  Num
11:4 - 11:5    c: Num -> Num
11:10 - 11:11  Num -> Num
11:28 - 11:29  Num -> Num
11:8 - 11:9    x: Num
11:12 - 11:18  Num
11:21 - 11:22  +: Num
11:19 - 11:20  x: Num
12:4 - 12:5    d: Num -> Num
12:10 - 12:12  Num -> Num
12:15 - 12:16  +: Num
12:13 - 12:14  x: Num
12:8 - 12:9    x: Num
13:4 - 13:5    e: b -> Num
13:9 - 13:11   b -> Num
15:0 - 15:5    print: Num
15:20 - 15:21  Num
15:18 - 15:19  b: Unit -> Num
15:6 - 15:17   some_record: {a: Bool, b: Unit -> Num, c: Num -> Num, d: Num -> Num, e: a -> Num}
16:4 - 16:11   tearoff: a -> Num
16:26 - 16:27  b: a -> Num
16:14 - 16:25  some_record: {a: Bool, b: a -> Num, c: Num -> Num, d: Num -> Num, e: b -> Num}
17:0 - 17:5    print: Num
17:14 - 17:15  Num
17:6 - 17:13   tearoff: Unit -> Num
19:0 - 19:5    print: Num
19:21 - 19:22  Num
19:18 - 19:19  c: Num -> Num
19:6 - 19:17   some_record: {a: Bool, b: a -> Num, c: Num -> Num, d: Num -> Num, e: b -> Num}
20:0 - 20:5    print: Num
20:22 - 20:23  Num
20:18 - 20:19  d: Num -> Num
20:6 - 20:17   some_record: {a: Bool, b: a -> Num, c: Num -> Num, d: Num -> Num, e: b -> Num}
21:0 - 21:5    print: Num
21:20 - 21:21  Num
21:18 - 21:19  e: Unit -> Num
21:6 - 21:17   some_record: {a: Bool, b: a -> Num, c: Num -> Num, d: Num -> Num, e: Unit -> Num}
23:0 - 23:5    print: Num
23:26 - 23:27  Num
23:10 - 23:11  Num -> Num
23:22 - 23:23  Num -> Num
23:8 - 23:9    x: Num
23:12 - 23:18  Num
23:19 - 23:20  x: Num
26:4 - 26:6    id: a -> a
26:12 - 26:14  a -> a
26:15 - 26:16  x: a
26:10 - 26:11  x: a
27:0 - 27:5    print: String
27:16 - 27:17  String
27:6 - 27:8    id: String -> String
28:0 - 28:5    print: Num
28:17 - 28:18  Num
28:10 - 28:12  Num -> Num
28:13 - 28:14  x: Num
28:8 - 28:9    x: Num
30:4 - 30:21   zero_arg_function: a -> Num
30:26 - 30:28  a -> Num
31:0 - 31:5    print: Num
31:24 - 31:25  Num
31:6 - 31:23   zero_arg_function: Unit -> Num
33:4 - 33:13   make_user: a, Num -> {name: a, age: Num, user_id: Num, calc_birth_year: Num -> Num}
33:27 - 33:29  a, Num -> {name: a, age: Num, user_id: Num, calc_birth_year: Num -> Num}
38:0 - 38:1    {...}: {name: a, age: Num, user_id: Num, calc_birth_year: Num -> Num}
34:4 - 34:8    name: a
34:4 - 34:8    name: a
35:4 - 35:7    age: Num
35:4 - 35:7    age: Num
36:4 - 36:11   user_id: Num
36:19 - 36:20  Num
36:13 - 36:18  clock: Unit -> Num
37:4 - 37:19   calc_birth_year: Num -> Num
37:35 - 37:37  Num -> Num
37:51 - 37:52  -: Num
37:38 - 37:50  current_year: Num
37:53 - 37:56  age: Num
37:22 - 37:34  current_year: Num
33:17 - 33:21  name: a
33:23 - 33:26  age: Num
40:4 - 40:8    user: {name: String, age: Num, user_id: Num, calc_birth_year: Num -> Num}
40:31 - 40:32  {name: String, age: Num, user_id: Num, calc_birth_year: Num -> Num}
40:11 - 40:20  make_user: String, Num -> {name: String, age: Num, user_id: Num, calc_birth_year: Num -> Num}
41:0 - 41:5    print: Num
41:11 - 41:14  age: Num
41:6 - 41:10   user: {name: String, age: Num, user_id: Num, calc_birth_year: Num -> Num}
42:0 - 42:5    print: Num
42:31 - 42:32  Num
42:11 - 42:26  calc_birth_year: Num -> Num
42:6 - 42:10   user: {name: String, age: Num, user_id: Num, calc_birth_year: Num -> Num}
___ OUTPUT ___
11
111
222
123
123
124
177
123
1
hello
1
123
30
1994


====== lists.lox =====
___ TYPES ___
0:5 - 0:8      map: (a -> b), List[a] -> List[b]
0:10 - 0:17    reverse: List[c] -> List[c]
0:19 - 0:25    reduce: (d, d -> d), List[d] -> .err(.empty_list) | .ok(d)
0:29 - 0:35    util/lists.lox: {plus: Num, Num -> Num, elements: List[g] -> .err(.empty_list) | .ok({first: g, rest: List[g]}), fold: j, (j, k -> j), List[k] -> j, try_fold: l, (l, m -> .err(n) | .ok(l)), List[m] -> .err(n) | .ok(l), map: (o -> p), List[o] -> List[p], reduce: (d, d -> d), List[d] -> .err(.empty_list) | .ok(d), reverse: List[q] -> List[q], where: (r -> Bool), List[r] -> List[r], enumerated: List[s] -> List[{element: s, index: Num}], count_where: (t -> Bool), List[t] -> Num, sort: List[Num] -> List[Num], zip: List[u], List[v], (u, v -> w) -> List[w], zip_with_tail: (x, x -> y), List[x] -> List[y], sum: List[Num] -> .err(.empty_list) | .ok(Num), fold_until: bb, (bb, cc -> .break(bb) | .continue(bb)), List[cc] -> bb, any: (dd -> Bool), List[dd] -> Bool, all: (ee -> Bool), List[ee] -> Bool, drop_at: Num, List[ff] -> List[ff], join: List[String] -> String, element_at: Num, List[gg] -> .err(.out_of_bounds) | .ok(gg), length: List[jj] -> Num}
0:36 - 0:52    util/lists.lox: {plus: Num, Num -> Num, elements: List[g] -> .err(.empty_list) | .ok({first: g, rest: List[g]}), fold: j, (j, k -> j), List[k] -> j, try_fold: l, (l, m -> .err(n) | .ok(l)), List[m] -> .err(n) | .ok(l), map: (o -> p), List[o] -> List[p], reduce: (d, d -> d), List[d] -> .err(.empty_list) | .ok(d), reverse: List[q] -> List[q], where: (r -> Bool), List[r] -> List[r], enumerated: List[s] -> List[{element: s, index: Num}], count_where: (t -> Bool), List[t] -> Num, sort: List[Num] -> List[Num], zip: List[u], List[v], (u, v -> w) -> List[w], zip_with_tail: (x, x -> y), List[x] -> List[y], sum: List[Num] -> .err(.empty_list) | .ok(Num), fold_until: bb, (bb, cc -> .break(bb) | .continue(bb)), List[cc] -> bb, any: (dd -> Bool), List[dd] -> Bool, all: (ee -> Bool), List[ee] -> Bool, drop_at: Num, List[ff] -> List[ff], join: List[String] -> String, element_at: Num, List[gg] -> .err(.out_of_bounds) | .ok(gg), length: List[jj] -> Num}
2:4 - 2:6      xs: List[Num]
2:17 - 2:18    [...]: List[Num]
3:0 - 3:5      print: List[Num]
3:6 - 3:8      xs: List[Num]
4:0 - 4:5      print: List[Num]
4:16 - 4:17    List[Num]
4:6 - 4:13     reverse: List[Num] -> List[Num]
4:14 - 4:16    xs: List[Num]
6:4 - 6:6      ys: List[a]
6:10 - 6:11    [...]: List[a]
7:0 - 7:5      print: List[a]
7:6 - 7:8      ys: List[a]
9:4 - 9:6      zs: List[Num]
9:11 - 9:12    [...]: List[Num]
10:0 - 10:5    print: List[Num]
10:6 - 10:8    zs: List[Num]
12:4 - 12:9    mixed: List[.hello(Num) | .tags({two: String})]
12:45 - 12:46  [...]: List[.hello(Num) | .tags({two: String})]
12:14 - 12:19  hello: .hello(Num) | .tags({two: String})
12:25 - 12:29  tags: .hello(Num) | .tags({two: String})
12:43 - 12:44  {...}: {two: String}
12:31 - 12:34  two: String
13:0 - 13:5    print: List[String]
13:12 - 13:14  \>: List[String]
13:6 - 13:11   mixed: List[.hello(Num) | .tags({two: String})]
16:1 - 16:2    List[.hello(Num) | .tags({two: String})] -> List[String]
13:15 - 13:18  map: (.hello(Num) | .tags({two: String}) -> String), List[.hello(Num) | .tags({two: String})] -> List[String]
13:22 - 13:24  .hello(Num) | .tags({two: String}) -> String
13:25 - 13:30  match: String
13:31 - 13:32  x: .hello(Num) | .tags({two: String})
14:5 - 14:10   hello: .hello(Num)
14:11 - 14:13  _0: Num
15:5 - 15:9    tags: .tags({two: String})
15:10 - 15:12  _1: {two: String}
13:20 - 13:21  x: .hello(Num) | .tags({two: String})
20:0 - 20:5    print: List[Bool]
20:14 - 20:16  \>: List[Bool]
20:12 - 20:13  [...]: List[Num]
20:33 - 20:34  List[Num] -> List[Bool]
20:17 - 20:20  map: (Num -> Bool), List[Num] -> List[Bool]
20:24 - 20:26  Num -> Bool
20:29 - 20:31  ==: Bool
20:27 - 20:28  x: Num
20:22 - 20:23  x: Num
21:0 - 21:5    print: List[Bool]
21:12 - 21:14  \>: List[Bool]
21:6 - 21:11   mixed: List[.hello(Num) | .tags({two: String})]
24:1 - 24:2    List[.hello(Num) | .tags({two: String})] -> List[Bool]
21:15 - 21:18  map: (.hello(Num) | .tags({two: String}) -> Bool), List[.hello(Num) | .tags({two: String})] -> List[Bool]
21:22 - 21:24  .hello(Num) | .tags({two: String}) -> Bool
21:25 - 21:30  match: Bool
21:31 - 21:32  x: .hello(Num) | .tags({two: String})
22:5 - 22:10   hello: .hello(Num)
22:11 - 22:12  n: Num
22:19 - 22:21  ==: Bool
22:17 - 22:18  n: Num
23:5 - 23:9    tags: .tags({two: String})
23:10 - 23:12  _2: {two: String}
21:20 - 21:21  x: .hello(Num) | .tags({two: String})
27:4 - 27:13   employees: List[{name: String, age: Num}]
31:0 - 31:1    [...]: List[{name: String, age: Num}]
28:26 - 28:27  {...}: {name: String, age: Num}
28:5 - 28:9    name: String
28:19 - 28:22  age: Num
29:26 - 29:27  {...}: {name: String, age: Num}
29:5 - 29:9    name: String
29:19 - 29:22  age: Num
30:25 - 30:26  {...}: {name: String, age: Num}
30:5 - 30:9    name: String
30:18 - 30:21  age: Num
33:4 - 33:25   employee_with_max_age: .err(.empty_list) | .ok({name: String, age: Num})
33:38 - 33:40  \>: .err(.empty_list) | .ok({name: String, age: Num})
33:28 - 33:37  employees: List[{name: String, age: Num}]
38:0 - 38:1    List[{name: String, age: Num}] -> .err(.empty_list) | .ok({name: String, age: Num})
33:41 - 33:47  reduce: ({name: String, age: Num}, {name: String, age: Num} -> {name: String, age: Num}), List[{name: String, age: Num}] -> .err(.empty_list) | .ok({name: String, age: Num})
34:23 - 34:25  {name: String, age: Num}, {name: String, age: Num} -> {name: String, age: Num}
36:12 - 36:13  ?: {name: String, age: Num}
35:21 - 35:22  >: Bool
35:17 - 35:20  age: Num
35:8 - 35:16   employee: {name: String, age: Num}
35:31 - 35:34  age: Num
35:23 - 35:30  highest: {name: String, age: Num}
36:14 - 36:22  employee: {name: String, age: Num}
37:14 - 37:21  highest: {name: String, age: Num}
34:5 - 34:12   highest: {name: String, age: Num}
34:14 - 34:22  employee: {name: String, age: Num}
39:0 - 39:5    print: .err(.empty_list) | .ok({name: String, age: Num})
39:6 - 39:27   employee_with_max_age: .err(.empty_list) | .ok({name: String, age: Num})
41:4 - 41:11   max_age: .err(.empty_list) | .ok(Num)
43:4 - 43:6    \>: .err(.empty_list) | .ok(Num)
42:4 - 42:6    \>: List[Num]
41:14 - 41:23  employees: List[{name: String, age: Num}]
42:22 - 42:23  List[{name: String, age: Num}] -> List[Num]
42:7 - 42:10   map: ({name: String, age: Num} -> Num), List[{name: String, age: Num}] -> List[Num]
42:14 - 42:16  {name: String, age: Num} -> Num
42:19 - 42:22  age: Num
42:17 - 42:18  e: {name: String, age: Num}
42:12 - 42:13  e: {name: String, age: Num}
43:60 - 43:61  List[Num] -> .err(.empty_list) | .ok(Num)
43:7 - 43:13   reduce: (Num, Num -> Num), List[Num] -> .err(.empty_list) | .ok(Num)
43:28 - 43:30  Num, Num -> Num
43:45 - 43:46  ?: Num
43:35 - 43:36  >: Bool
43:31 - 43:34  age: Num
43:37 - 43:44  highest: Num
43:47 - 43:50  age: Num
43:53 - 43:60  highest: Num
43:15 - 43:22  highest: Num
43:24 - 43:27  age: Num
45:0 - 45:5    print: .err(.empty_list) | .ok(Num)
45:6 - 45:13   max_age: .err(.empty_list) | .ok(Num)
47:4 - 47:7    max: Num, Num -> Num
47:16 - 47:18  Num, Num -> Num
47:25 - 47:26  ?: Num
47:21 - 47:22  >: Bool
47:19 - 47:20  x: Num
47:23 - 47:24  y: Num
47:27 - 47:28  x: Num
47:31 - 47:32  y: Num
47:11 - 47:12  x: Num
47:14 - 47:15  y: Num
48:4 - 48:7    min: Num, Num -> Num
48:16 - 48:18  Num, Num -> Num
48:25 - 48:26  ?: Num
48:21 - 48:22  <: Bool
48:19 - 48:20  x: Num
48:23 - 48:24  y: Num
48:27 - 48:28  x: Num
48:31 - 48:32  y: Num
48:11 - 48:12  x: Num
48:14 - 48:15  y: Num
50:0 - 50:5    print: .err(.empty_list) | .ok(Num)
52:4 - 52:6    \>: .err(.empty_list) | .ok(Num)
51:4 - 51:6    \>: List[Num]
50:6 - 50:15   employees: List[{name: String, age: Num}]
51:22 - 51:23  List[{name: String, age: Num}] -> List[Num]
51:7 - 51:10   map: ({name: String, age: Num} -> Num), List[{name: String, age: Num}] -> List[Num]
51:14 - 51:16  {name: String, age: Num} -> Num
51:19 - 51:22  age: Num
51:17 - 51:18  e: {name: String, age: Num}
51:12 - 51:13  e: {name: String, age: Num}
52:17 - 52:18  List[Num] -> .err(.empty_list) | .ok(Num)
52:7 - 52:13   reduce: (Num, Num -> Num), List[Num] -> .err(.empty_list) | .ok(Num)
52:14 - 52:17  max: Num, Num -> Num
55:0 - 55:5    print: .err(.empty_list) | .ok(Num)
57:4 - 57:6    \>: .err(.empty_list) | .ok(Num)
56:4 - 56:6    \>: List[Num]
55:6 - 55:15   employees: List[{name: String, age: Num}]
56:22 - 56:23  List[{name: String, age: Num}] -> List[Num]
56:7 - 56:10   map: ({name: String, age: Num} -> Num), List[{name: String, age: Num}] -> List[Num]
56:14 - 56:16  {name: String, age: Num} -> Num
56:19 - 56:22  age: Num
56:17 - 56:18  e: {name: String, age: Num}
56:12 - 56:13  e: {name: String, age: Num}
57:17 - 57:18  List[Num] -> .err(.empty_list) | .ok(Num)
57:7 - 57:13   reduce: (Num, Num -> Num), List[Num] -> .err(.empty_list) | .ok(Num)
57:14 - 57:17  min: Num, Num -> Num
60:0 - 60:5    print: {name: String, age: Num}
60:16 - 60:18  \>: {name: String, age: Num}
60:6 - 60:15   employees: List[{name: String, age: Num}]
60:24 - 60:29  first: List[{name: String, age: Num}] -> {name: String, age: Num}
60:19 - 60:23  List: {first: List[{name: String, age: Num}] -> {name: String, age: Num}, rest: List[a] -> List[a], empty: List[b] -> Bool}
62:4 - 62:7    sub: Num, Num -> Num
62:16 - 62:18  Num, Num -> Num
62:20 - 62:21  -: Num
62:19 - 62:20  x: Num
62:21 - 62:22  y: Num
62:11 - 62:12  x: Num
62:14 - 62:15  y: Num
63:4 - 63:6    id: a -> a
63:12 - 63:14  a -> a
63:15 - 63:16  x: a
63:10 - 63:11  x: a
65:4 - 65:15   one_minus_x: Num -> Num
65:26 - 65:27  Num -> Num
65:25 - 65:26  _: <unknown>
65:18 - 65:21  sub: Num, Num -> Num
66:4 - 66:15   x_minus_one: Num -> Num
66:26 - 66:27  Num -> Num
66:22 - 66:23  _: <unknown>
66:18 - 66:21  sub: Num, Num -> Num
68:0 - 68:5    print: Num
68:19 - 68:20  Num
68:6 - 68:17   one_minus_x: Num -> Num
69:0 - 69:5    print: Num
69:19 - 69:20  Num
69:6 - 69:17   x_minus_one: Num -> Num
71:0 - 71:5    print: String
72:0 - 72:5    print: Num
72:24 - 72:26  \>: Num
72:10 - 72:12  \>: Num
72:8 - 72:9    [...]: List[Num]
72:18 - 72:23  first: List[Num] -> Num
72:13 - 72:17  List: {first: List[Num] -> Num, rest: List[a] -> List[a], empty: List[b] -> Bool}
72:27 - 72:29  id: Num -> Num
74:0 - 74:5    print: String
75:0 - 75:5    print: Num
75:23 - 75:25  \>: Num
75:8 - 75:10   \>: Num
75:11 - 75:22  x_minus_one: Num -> Num
75:26 - 75:37  x_minus_one: Num -> Num
77:0 - 77:5    print: String
78:0 - 78:5    print: Num
78:30 - 78:32  \>: Num
78:24 - 78:26  \>: Num
78:10 - 78:12  \>: Num
78:8 - 78:9    [...]: List[Num]
78:18 - 78:23  first: List[Num] -> Num
78:13 - 78:17  List: {first: List[Num] -> Num, rest: List[a] -> List[a], empty: List[b] -> Bool}
78:27 - 78:29  id: Num -> Num
78:41 - 78:42  Num -> Num
78:37 - 78:38  _: <unknown>
78:33 - 78:36  sub: Num, Num -> Num
80:0 - 80:5    print: List[Bool]
80:47 - 80:48  List[Bool]
80:19 - 80:21  List[Bool], Bool -> List[Bool]
80:35 - 80:36  [...]: List[Bool]
80:25 - 80:29  list: List[Bool]
80:31 - 80:35  item: Bool
80:8 - 80:12   list: List[Bool]
80:14 - 80:18  item: Bool
80:39 - 80:40  [...]: List[Bool]
81:0 - 81:5    print: List[Bool]
81:50 - 81:51  List[Bool]
81:46 - 81:47  List[Bool] -> List[Bool]
81:38 - 81:39  _: <unknown>
81:19 - 81:21  List[Bool], Bool -> List[Bool]
81:35 - 81:36  [...]: List[Bool]
81:25 - 81:29  list: List[Bool]
81:31 - 81:35  item: Bool
81:8 - 81:12   list: List[Bool]
81:14 - 81:18  item: Bool
81:49 - 81:50  [...]: List[Bool]
83:0 - 83:6    assert: Bool
83:37 - 83:39  ==: Bool
83:15 - 83:17  \>: List[Num]
83:13 - 83:14  [...]: List[Num]
83:35 - 83:36  List[Num] -> List[Num]
83:21 - 83:24  map: (Num -> Num), List[Num] -> List[Num]
83:31 - 83:33  Num -> Num
83:26 - 83:28  _3: Num
83:48 - 83:49  [...]: List[Num]
84:0 - 84:6    assert: Bool
84:37 - 84:39  ==: Bool
84:15 - 84:17  \>: .err(.empty_list) | .ok(Num)
84:13 - 84:14  [...]: List[Num]
84:35 - 84:36  List[Num] -> .err(.empty_list) | .ok(Num)
84:18 - 84:24  reduce: (Num, Num -> Num), List[Num] -> .err(.empty_list) | .ok(Num)
84:31 - 84:33  Num, Num -> Num
84:26 - 84:28  _4: Num
84:29 - 84:31  _5: Num
84:41 - 84:43  ok: .err(.empty_list) | .ok(Num)
___ OUTPUT ___
[1, 2, 3]
[3, 2, 1]
[]
[1]
[its a `.hello` tag, its not]
[true, false, false]
[true, false]
.ok({name: jane, age: 60})
.ok(60)
.ok(60)
.ok(30)
{name: mike, age: 30}
-2
2
[1] \> List.first \> id
1
1 \> x_minus_one \> x_minus_one
-1
[1] \> List.first \> id \> sub(_, 1)
0
[false]
[false]


====== make_counter.lox =====
___ Type checking failed ___
Recursive types:
_5
_10 -> _5
___ Continuing with execution ___
___ OUTPUT ___
1
2
3


====== patterns.lox =====
___ TYPES ___
0:5 - 0:9      join: List[String] -> String
0:13 - 0:19    util/lists.lox: {plus: Num, Num -> Num, elements: List[a] -> .err(.empty_list) | .ok({first: a, rest: List[a]}), fold: d, (d, e -> d), List[e] -> d, try_fold: f, (f, g -> .err(h) | .ok(f)), List[g] -> .err(h) | .ok(f), map: (i -> j), List[i] -> List[j], reduce: (k, k -> k), List[k] -> .err(.empty_list) | .ok(k), reverse: List[n] -> List[n], where: (o -> Bool), List[o] -> List[o], enumerated: List[p] -> List[{element: p, index: Num}], count_where: (q -> Bool), List[q] -> Num, sort: List[Num] -> List[Num], zip: List[r], List[s], (r, s -> t) -> List[t], zip_with_tail: (u, u -> v), List[u] -> List[v], sum: List[Num] -> .err(.empty_list) | .ok(Num), fold_until: y, (y, z -> .break(y) | .continue(y)), List[z] -> y, any: (aa -> Bool), List[aa] -> Bool, all: (bb -> Bool), List[bb] -> Bool, drop_at: Num, List[cc] -> List[cc], join: List[String] -> String, element_at: Num, List[dd] -> .err(.out_of_bounds) | .ok(dd), length: List[gg] -> Num}
0:20 - 0:36    util/lists.lox: {plus: Num, Num -> Num, elements: List[a] -> .err(.empty_list) | .ok({first: a, rest: List[a]}), fold: d, (d, e -> d), List[e] -> d, try_fold: f, (f, g -> .err(h) | .ok(f)), List[g] -> .err(h) | .ok(f), map: (i -> j), List[i] -> List[j], reduce: (k, k -> k), List[k] -> .err(.empty_list) | .ok(k), reverse: List[n] -> List[n], where: (o -> Bool), List[o] -> List[o], enumerated: List[p] -> List[{element: p, index: Num}], count_where: (q -> Bool), List[q] -> Num, sort: List[Num] -> List[Num], zip: List[r], List[s], (r, s -> t) -> List[t], zip_with_tail: (u, u -> v), List[u] -> List[v], sum: List[Num] -> .err(.empty_list) | .ok(Num), fold_until: y, (y, z -> .break(y) | .continue(y)), List[z] -> y, any: (aa -> Bool), List[aa] -> Bool, all: (bb -> Bool), List[bb] -> Bool, drop_at: Num, List[cc] -> List[cc], join: List[String] -> String, element_at: Num, List[dd] -> .err(.out_of_bounds) | .ok(dd), length: List[gg] -> Num}
2:4 - 2:12     describe: {as_of: Num}, {serial_number: c, manufacture_date: {year: e}, name: {label: String}} -> String
2:38 - 2:40    {as_of: Num}, {serial_number: c, manufacture_date: {year: e}, name: {label: String}} -> String
2:48 - 2:49    {serial_number: c, manufacture_date: {year: e}, name: {label: String}} -> String
10:0 - 10:1    {serial_number: c, manufacture_date: {year: e}, name: {label: String}} -> String
2:42 - 2:47    robot: {serial_number: c, manufacture_date: {year: e}, name: {label: String}}
4:8 - 4:12     name: {label: String}
4:16 - 4:21    label: String
5:8 - 5:24     manufacture_date: {year: e}
5:28 - 5:32    year: e
5:34 - 5:47    creation_year: e
6:8 - 6:21     serial_number: c
7:8 - 7:13     robot: {serial_number: c, manufacture_date: {year: e}, name: {label: String}}
8:8 - 8:19     is_old_tech: Bool
8:51 - 8:52    >: Bool
8:35 - 8:36    -: Num
8:22 - 8:34    current_year: Num
8:37 - 8:50    creation_year: Num
9:4 - 9:10     String
9:80 - 9:82    \>: String
9:78 - 9:79    [...]: List[String]
9:12 - 9:17    label: String
9:26 - 9:39    serial_number: String
9:53 - 9:54    ?: String
9:41 - 9:52    is_old_tech: Bool
9:83 - 9:87    join: List[String] -> String
2:17 - 2:22    as_of: Num
2:24 - 2:36    current_year: Num
12:4 - 12:9    robot: {name: {label: String, title: String, version: String}, manufacture_date: {year: Num, month: Num, day: Num}, serial_number: String}
24:0 - 24:1    {...}: {name: {label: String, title: String, version: String}, manufacture_date: {year: Num, month: Num, day: Num}, serial_number: String}
13:4 - 13:8    name: {label: String, title: String, version: String}
17:4 - 17:5    {...}: {label: String, title: String, version: String}
14:8 - 14:13   label: String
15:8 - 15:13   title: String
16:8 - 16:15   version: String
18:4 - 18:20   manufacture_date: {year: Num, month: Num, day: Num}
22:4 - 22:5    {...}: {year: Num, month: Num, day: Num}
19:8 - 19:12   year: Num
20:8 - 20:13   month: Num
21:8 - 21:11   day: Num
23:4 - 23:17   serial_number: String
26:4 - 26:15   description: String
26:24 - 26:26  \>: String
26:18 - 26:23  robot: {name: {label: String, title: String, version: String}, manufacture_date: {year: Num, month: Num, day: Num}, serial_number: String}
26:49 - 26:50  {serial_number: String, manufacture_date: {month: Num, day: Num, year: Num}, name: {title: String, version: String, label: String}} -> String
26:27 - 26:35  describe: {as_of: Num}, {serial_number: String, manufacture_date: {month: Num, day: Num, year: Num}, name: {title: String, version: String, label: String}} -> String
26:48 - 26:49  {...}: {as_of: Num}
26:37 - 26:42  as_of: Num
27:0 - 27:5    print: String
27:6 - 27:17   description: String
28:0 - 28:6    assert: Bool
28:19 - 28:21  ==: Bool
28:7 - 28:18   description: String
31:4 - 31:6    _0: Num
32:4 - 32:6    _1: Num
33:4 - 33:6    _2: String
34:4 - 34:17   discard_param: a -> Num
34:23 - 34:25  a -> Num
34:21 - 34:23  _3: a
35:0 - 35:6    assert: Bool
35:26 - 35:28  ==: Bool
35:24 - 35:25  Num
35:7 - 35:20   discard_param: String -> Num
36:0 - 36:6    assert: Bool
36:25 - 36:27  ==: Bool
36:23 - 36:24  Num
36:7 - 36:20   discard_param: List[a] -> Num
36:22 - 36:23  [...]: List[a]
38:4 - 38:7    f01: {a: Num} -> Num
38:15 - 38:17  {a: Num} -> Num
38:19 - 38:20  +: Num
38:20 - 38:21  a: Num
38:12 - 38:13  a: Num
39:4 - 39:7    f02: {a: Num} -> Num
39:15 - 39:16  {a: Num} -> Num
39:29 - 39:30  {a: Num} -> Num
39:12 - 39:13  a: Num
39:17 - 39:23  Num
39:25 - 39:26  +: Num
39:26 - 39:27  a: Num
40:4 - 40:7    f03: {a: Num} -> Num
40:18 - 40:20  {a: Num} -> Num
40:22 - 40:23  +: Num
40:23 - 40:24  b: Num
40:12 - 40:13  a: Num
40:15 - 40:16  b: Num
41:4 - 41:7    f04: {a: Num} -> Num
41:18 - 41:19  {a: Num} -> Num
41:32 - 41:33  {a: Num} -> Num
41:12 - 41:13  a: Num
41:15 - 41:16  b: Num
41:20 - 41:26  Num
41:28 - 41:29  +: Num
41:29 - 41:30  b: Num
43:0 - 43:6    assert: Bool
43:19 - 43:21  ==: Bool
43:17 - 43:18  Num
43:7 - 43:10   f01: {a: Num} -> Num
43:16 - 43:17  {...}: {a: Num}
43:12 - 43:13  a: Num
44:0 - 44:6    assert: Bool
44:19 - 44:21  ==: Bool
44:17 - 44:18  Num
44:7 - 44:10   f02: {a: Num} -> Num
44:16 - 44:17  {...}: {a: Num}
44:12 - 44:13  a: Num
45:0 - 45:6    assert: Bool
45:19 - 45:21  ==: Bool
45:17 - 45:18  Num
45:7 - 45:10   f03: {a: Num} -> Num
45:16 - 45:17  {...}: {a: Num}
45:12 - 45:13  a: Num
46:0 - 46:6    assert: Bool
46:19 - 46:21  ==: Bool
46:17 - 46:18  Num
46:7 - 46:10   f04: {a: Num} -> Num
46:16 - 46:17  {...}: {a: Num}
46:12 - 46:13  a: Num
48:4 - 48:7    f06: Num, {a: Num} -> Num
48:18 - 48:20  Num, {a: Num} -> Num
48:24 - 48:25  +: Num
48:22 - 48:23  +: Num
48:23 - 48:24  a: Num
48:25 - 48:26  x: Num
48:11 - 48:12  x: Num
48:15 - 48:16  a: Num
49:4 - 49:7    f07: Num, {a: Num} -> Num
49:18 - 49:19  Num, {a: Num} -> Num
49:34 - 49:35  Num, {a: Num} -> Num
49:11 - 49:12  x: Num
49:15 - 49:16  a: Num
49:20 - 49:26  Num
49:30 - 49:31  +: Num
49:28 - 49:29  +: Num
49:29 - 49:30  a: Num
49:31 - 49:32  x: Num
50:4 - 50:7    f08: Num, {a: Num} -> Num
50:21 - 50:23  Num, {a: Num} -> Num
50:27 - 50:28  +: Num
50:25 - 50:26  +: Num
50:26 - 50:27  b: Num
50:28 - 50:29  x: Num
50:11 - 50:12  x: Num
50:15 - 50:16  a: Num
50:18 - 50:19  b: Num
51:4 - 51:7    f09: Num, {a: Num} -> Num
51:21 - 51:22  Num, {a: Num} -> Num
51:37 - 51:38  Num, {a: Num} -> Num
51:11 - 51:12  x: Num
51:15 - 51:16  a: Num
51:18 - 51:19  b: Num
51:23 - 51:29  Num
51:33 - 51:34  +: Num
51:31 - 51:32  +: Num
51:32 - 51:33  b: Num
51:34 - 51:35  x: Num
53:0 - 53:6    assert: Bool
53:22 - 53:24  ==: Bool
53:20 - 53:21  Num
53:7 - 53:10   f06: Num, {a: Num} -> Num
53:19 - 53:20  {...}: {a: Num}
53:15 - 53:16  a: Num
54:0 - 54:6    assert: Bool
54:22 - 54:24  ==: Bool
54:20 - 54:21  Num
54:7 - 54:10   f07: Num, {a: Num} -> Num
54:19 - 54:20  {...}: {a: Num}
54:15 - 54:16  a: Num
55:0 - 55:6    assert: Bool
55:22 - 55:24  ==: Bool
55:20 - 55:21  Num
55:7 - 55:10   f08: Num, {a: Num} -> Num
55:19 - 55:20  {...}: {a: Num}
55:15 - 55:16  a: Num
56:0 - 56:6    assert: Bool
56:22 - 56:24  ==: Bool
56:20 - 56:21  Num
56:7 - 56:10   f09: Num, {a: Num} -> Num
56:19 - 56:20  {...}: {a: Num}
56:15 - 56:16  a: Num
58:4 - 58:7    f10: {a: Num}, Num -> Num
58:18 - 58:20  {a: Num}, Num -> Num
58:24 - 58:25  +: Num
58:22 - 58:23  +: Num
58:23 - 58:24  a: Num
58:25 - 58:26  x: Num
58:12 - 58:13  a: Num
58:16 - 58:17  x: Num
59:4 - 59:7    f11: {a: Num}, Num -> Num
59:18 - 59:19  {a: Num}, Num -> Num
59:34 - 59:35  {a: Num}, Num -> Num
59:12 - 59:13  a: Num
59:16 - 59:17  x: Num
59:20 - 59:26  Num
59:30 - 59:31  +: Num
59:28 - 59:29  +: Num
59:29 - 59:30  a: Num
59:31 - 59:32  x: Num
60:4 - 60:7    f12: {a: Num}, Num -> Num
60:21 - 60:23  {a: Num}, Num -> Num
60:27 - 60:28  +: Num
60:25 - 60:26  +: Num
60:26 - 60:27  b: Num
60:28 - 60:29  x: Num
60:12 - 60:13  a: Num
60:15 - 60:16  b: Num
60:19 - 60:20  x: Num
61:4 - 61:7    f13: {a: Num}, Num -> Num
61:21 - 61:22  {a: Num}, Num -> Num
61:37 - 61:38  {a: Num}, Num -> Num
61:12 - 61:13  a: Num
61:15 - 61:16  b: Num
61:19 - 61:20  x: Num
61:23 - 61:29  Num
61:33 - 61:34  +: Num
61:31 - 61:32  +: Num
61:32 - 61:33  b: Num
61:34 - 61:35  x: Num
63:0 - 63:6    assert: Bool
63:22 - 63:24  ==: Bool
63:20 - 63:21  Num
63:7 - 63:10   f10: {a: Num}, Num -> Num
63:16 - 63:17  {...}: {a: Num}
63:12 - 63:13  a: Num
64:0 - 64:6    assert: Bool
64:22 - 64:24  ==: Bool
64:20 - 64:21  Num
64:7 - 64:10   f11: {a: Num}, Num -> Num
64:16 - 64:17  {...}: {a: Num}
64:12 - 64:13  a: Num
65:0 - 65:6    assert: Bool
65:22 - 65:24  ==: Bool
65:20 - 65:21  Num
65:7 - 65:10   f12: {a: Num}, Num -> Num
65:16 - 65:17  {...}: {a: Num}
65:12 - 65:13  a: Num
66:0 - 66:6    assert: Bool
66:22 - 66:24  ==: Bool
66:20 - 66:21  Num
66:7 - 66:10   f13: {a: Num}, Num -> Num
66:16 - 66:17  {...}: {a: Num}
66:12 - 66:13  a: Num
___ OUTPUT ___
a - abc123 (VINTAGE)


====== records.lox =====
___ TYPES ___
0:4 - 0:7      foo: a -> Num
0:12 - 0:13    a -> Num
0:26 - 0:27    a -> Num
0:14 - 0:20    Num
3:4 - 3:15     some_record: {a: String, b: Num, c: Bool, d: a -> Num}
8:0 - 8:1      {...}: {a: String, b: Num, c: Bool, d: a -> Num}
4:4 - 4:5      a: String
5:4 - 5:5      b: Num
6:4 - 6:5      c: Bool
7:4 - 7:5      d: a -> Num
7:7 - 7:10     foo: a -> Num
10:0 - 10:5    print: {a: String, b: Num, c: Bool, d: a -> Num}
10:6 - 10:17   some_record: {a: String, b: Num, c: Bool, d: a -> Num}
12:0 - 12:5    print: String
12:18 - 12:19  a: String
12:6 - 12:17   some_record: {a: String, b: Num, c: Bool, d: a -> Num}
13:0 - 13:5    print: a -> Num
13:18 - 13:19  d: a -> Num
13:6 - 13:17   some_record: {a: String, b: Num, c: Bool, d: a -> Num}
14:4 - 14:11   tearoff: a -> Num
14:26 - 14:27  d: a -> Num
14:14 - 14:25  some_record: {a: String, b: Num, c: Bool, d: a -> Num}
15:0 - 15:5    print: Num
15:14 - 15:15  Num
15:6 - 15:13   tearoff: Unit -> Num
17:0 - 17:5    print: Num
17:20 - 17:21  Num
17:18 - 17:19  d: Unit -> Num
17:6 - 17:17   some_record: {a: String, b: Num, c: Bool, d: Unit -> Num}
19:4 - 19:6    ok: a -> {first: a, last: Unit, nested: {another: Num}, name: a}
19:15 - 19:16  a -> {first: a, last: Unit, nested: {another: Num}, name: a}
28:0 - 28:1    a -> {first: a, last: Unit, nested: {another: Num}, name: a}
19:10 - 19:14  name: a
20:4 - 20:10   {first: a, last: Unit, nested: {another: Num}, name: a}
27:4 - 27:5    {...}: {first: a, last: Unit, nested: {another: Num}, name: a}
21:8 - 21:13   first: a
21:15 - 21:19  name: a
22:8 - 22:12   last: Unit
23:8 - 23:14   nested: {another: Num}
25:8 - 25:9    {...}: {another: Num}
24:12 - 24:19  another: Num
26:8 - 26:12   name: a
26:14 - 26:18  name: a
30:4 - 30:8    user: {first: String, last: Unit, nested: {another: Num}, name: String}
30:19 - 30:20  {first: String, last: Unit, nested: {another: Num}, name: String}
30:11 - 30:13  ok: String -> {first: String, last: Unit, nested: {another: Num}, name: String}
31:0 - 31:5    print: String
31:11 - 31:16  first: String
31:6 - 31:10   user: {first: String, last: Unit, nested: {another: Num}, name: String}
32:0 - 32:5    print: Unit
32:11 - 32:15  last: Unit
32:6 - 32:10   user: {first: String, last: Unit, nested: {another: Num}, name: String}
33:0 - 33:5    print: Num
33:18 - 33:25  another: Num
33:11 - 33:17  nested: {another: Num}
33:6 - 33:10   user: {first: String, last: Unit, nested: {another: Num}, name: String}
34:0 - 34:5    print: String
34:11 - 34:15  name: String
34:6 - 34:10   user: {first: String, last: Unit, nested: {another: Num}, name: String}
36:0 - 36:5    print: String
38:4 - 38:9    user2: {first: Num, last: Unit, nested: {another: Num}, name: Num}
38:16 - 38:17  {first: Num, last: Unit, nested: {another: Num}, name: Num}
38:12 - 38:14  ok: Num -> {first: Num, last: Unit, nested: {another: Num}, name: Num}
39:0 - 39:5    print: Num
39:12 - 39:17  first: Num
39:6 - 39:11   user2: {first: Num, last: Unit, nested: {another: Num}, name: Num}
40:0 - 40:5    print: Unit
40:12 - 40:16  last: Unit
40:6 - 40:11   user2: {first: Num, last: Unit, nested: {another: Num}, name: Num}
41:0 - 41:5    print: Num
41:19 - 41:26  another: Num
41:12 - 41:18  nested: {another: Num}
41:6 - 41:11   user2: {first: Num, last: Unit, nested: {another: Num}, name: Num}
42:0 - 42:5    print: Num
42:12 - 42:16  name: Num
42:6 - 42:11   user2: {first: Num, last: Unit, nested: {another: Num}, name: Num}
44:4 - 44:16   empty_record: {}
44:20 - 44:21  {...}: {}
45:0 - 45:5    print: {}
45:6 - 45:18   empty_record: {}
46:0 - 46:5    print: {}
46:7 - 46:8    {...}: {}
48:4 - 48:6    r1: {a: String}
48:16 - 48:17  {...}: {a: String}
48:10 - 48:11  a: String
49:4 - 49:6    r2: {a: String, b: Bool}
49:24 - 49:25  {...}: {a: String, b: Bool}
49:12 - 49:14  r1: {a: String}
49:16 - 49:17  b: Bool
50:4 - 50:6    r3: {a: String, b: Bool, c: Num}
50:29 - 50:30  {...}: {a: String, b: Bool, c: Num}
50:12 - 50:14  r1: {a: String}
50:16 - 50:17  b: Bool
50:25 - 50:26  c: Num
51:4 - 51:6    r4: {a: String}
51:14 - 51:15  {...}: {a: String}
51:12 - 51:14  r1: {a: String}
52:4 - 52:6    r5: {a: String, a: String}
52:22 - 52:23  {...}: {a: String, a: String}
52:12 - 52:14  r1: {a: String}
52:16 - 52:17  a: String
53:4 - 53:6    r6: {a: String, a: Bool}
53:23 - 53:24  {...}: {a: String, a: Bool}
53:12 - 53:14  r1: {a: String}
53:16 - 53:17  a: Bool
55:0 - 55:6    assert: Bool
55:10 - 55:12  ==: Bool
55:7 - 55:9    r1: {a: String}
55:20 - 55:21  {...}: {a: String}
55:14 - 55:15  a: String
56:0 - 56:6    assert: Bool
56:10 - 56:12  ==: Bool
56:7 - 56:9    r2: {a: String, b: Bool}
56:30 - 56:31  {...}: {a: String, b: Bool}
56:14 - 56:15  a: String
56:22 - 56:23  b: Bool
57:0 - 57:6    assert: Bool
57:12 - 57:14  ==: Bool
57:10 - 57:11  b: Bool
57:7 - 57:9    r2: {a: String, b: Bool}
58:0 - 58:6    assert: Bool
58:10 - 58:12  ==: Bool
58:7 - 58:9    r3: {a: String, b: Bool, c: Num}
58:35 - 58:36  {...}: {a: String, b: Bool, c: Num}
58:14 - 58:15  a: String
58:22 - 58:23  b: Bool
58:31 - 58:32  c: Num
59:0 - 59:6    assert: Bool
59:12 - 59:14  ==: Bool
59:10 - 59:11  b: Bool
59:7 - 59:9    r3: {a: String, b: Bool, c: Num}
60:0 - 60:6    assert: Bool
60:10 - 60:12  ==: Bool
60:7 - 60:9    r4: {a: String}
60:20 - 60:21  {...}: {a: String}
60:14 - 60:15  a: String
72:4 - 72:9    named: a, b -> {name: b}
72:21 - 72:23  a, b -> {name: b}
72:40 - 72:41  {...}: {name: b}
72:27 - 72:28  r: a
72:30 - 72:34  name: b
72:36 - 72:40  name: b
72:13 - 72:14  r: a
72:16 - 72:20  name: b
74:4 - 74:6    x1: {title: String, name: String}
74:39 - 74:40  {...}: {title: String, name: String}
74:10 - 74:15  title: String
74:22 - 74:26  name: String
75:4 - 75:6    y1: {title: String, name: String, name: String}
75:28 - 75:29  {title: String, name: String, name: String}
75:9 - 75:14   named: {title: String, name: String}, String -> {title: String, name: String, name: String}
75:15 - 75:17  x1: {title: String, name: String}
76:0 - 76:6    assert: Bool
76:15 - 76:17  ==: Bool
76:10 - 76:14  name: String
76:7 - 76:9    x1: {title: String, name: String}
77:0 - 77:6    assert: Bool
77:15 - 77:17  ==: Bool
77:10 - 77:14  name: String
77:7 - 77:9    y1: {title: String, name: String, name: String}
79:4 - 79:6    x2: {title: String, name: Num}
79:30 - 79:31  {...}: {title: String, name: Num}
79:10 - 79:15  title: String
79:22 - 79:26  name: Num
80:4 - 80:6    y2: {title: String, name: Num, name: String}
80:28 - 80:29  {title: String, name: Num, name: String}
80:9 - 80:14   named: {title: String, name: Num}, String -> {title: String, name: Num, name: String}
80:15 - 80:17  x2: {title: String, name: Num}
81:0 - 81:6    assert: Bool
81:15 - 81:17  ==: Bool
81:10 - 81:14  name: Num
81:7 - 81:9    x2: {title: String, name: Num}
82:0 - 82:6    assert: Bool
82:15 - 82:17  ==: Bool
82:10 - 82:14  name: String
82:7 - 82:9    y2: {title: String, name: Num, name: String}
84:4 - 84:6    x3: {title: String, name: String}
84:35 - 84:36  {...}: {title: String, name: String}
84:10 - 84:15  title: String
84:22 - 84:26  name: String
85:4 - 85:6    y3: {title: String, name: String, name: Num}
85:21 - 85:22  {title: String, name: String, name: Num}
85:9 - 85:14   named: {title: String, name: String}, Num -> {title: String, name: String, name: Num}
85:15 - 85:17  x3: {title: String, name: String}
86:0 - 86:6    assert: Bool
86:15 - 86:17  ==: Bool
86:10 - 86:14  name: String
86:7 - 86:9    x3: {title: String, name: String}
87:0 - 87:6    assert: Bool
87:15 - 87:17  ==: Bool
87:10 - 87:14  name: Num
87:7 - 87:9    y3: {title: String, name: String, name: Num}
90:4 - 90:10   incr_x: {x: Num} -> {x: Num, x: Num}
90:16 - 90:18  {x: Num} -> {x: Num, x: Num}
90:33 - 90:34  {...}: {x: Num, x: Num}
90:22 - 90:23  r: {x: Num}
90:25 - 90:26  x: Num
90:31 - 90:32  +: Num
90:30 - 90:31  x: Num
90:28 - 90:29  r: {x: Num}
90:14 - 90:15  r: {x: Num}
91:4 - 91:10   point1: {y: Num, x: Num}
91:24 - 91:25  {...}: {y: Num, x: Num}
91:14 - 91:15  y: Num
91:20 - 91:21  x: Num
92:4 - 92:10   point2: {y: Num, x: Num, x: Num}
92:26 - 92:27  {y: Num, x: Num, x: Num}
92:13 - 92:19  incr_x: {y: Num, x: Num} -> {y: Num, x: Num, x: Num}
92:20 - 92:26  point1: {y: Num, x: Num}
93:4 - 93:10   point3: {y: Num, x: Num, x: Num, x: Num}
93:26 - 93:27  {y: Num, x: Num, x: Num, x: Num}
93:13 - 93:19  incr_x: {y: Num, x: Num, x: Num} -> {y: Num, x: Num, x: Num, x: Num}
93:20 - 93:26  point2: {y: Num, x: Num, x: Num}
95:0 - 95:6    assert: Bool
95:14 - 95:16  ==: Bool
95:7 - 95:13   point1: {y: Num, x: Num}
95:28 - 95:29  {...}: {y: Num, x: Num}
95:18 - 95:19  y: Num
95:24 - 95:25  x: Num
106:4 - 106:13 summarize: {wins: Num, losses: Num, draws: Num} -> {total: Num, win_rate: Num}
106:39 - 106:40 {wins: Num, losses: Num, draws: Num} -> {total: Num, win_rate: Num}
110:0 - 110:1  {wins: Num, losses: Num, draws: Num} -> {total: Num, win_rate: Num}
106:18 - 106:22 wins: Num
106:24 - 106:30 losses: Num
106:32 - 106:37 draws: Num
107:8 - 107:13 total: Num
107:30 - 107:31 +: Num
107:21 - 107:22 +: Num
107:16 - 107:20 wins: Num
107:23 - 107:29 losses: Num
107:32 - 107:37 draws: Num
108:8 - 108:16 win_rate: Num
108:29 - 108:30 ?: Num
108:25 - 108:26 >: Bool
108:19 - 108:24 total: Num
108:36 - 108:37 /: Num
108:31 - 108:35 wins: Num
108:38 - 108:43 total: Num
109:4 - 109:10 {total: Num, win_rate: Num}
109:29 - 109:30 {...}: {total: Num, win_rate: Num}
109:13 - 109:18 total: Num
109:13 - 109:18 total: Num
109:20 - 109:28 win_rate: Num
109:20 - 109:28 win_rate: Num
112:5 - 112:10 total: Num
112:12 - 112:20 win_rate: Num
112:22 - 112:26 rate: Num
112:70 - 112:71 {total: Num, win_rate: Num}
112:30 - 112:39 summarize: {wins: Num, losses: Num, draws: Num} -> {total: Num, win_rate: Num}
112:69 - 112:70 {...}: {wins: Num, losses: Num, draws: Num}
112:41 - 112:45 wins: Num
112:50 - 112:56 losses: Num
112:61 - 112:66 draws: Num
113:0 - 113:5  print: Num
113:6 - 113:11 total: Num
114:0 - 114:5  print: Num
114:6 - 114:10 rate: Num
___ OUTPUT ___
{a: one, b: 2, c: false, d: (arity: 0, impl: Closure: (List<Object?>) => Object?)}
one
(arity: 0, impl: Closure: (List<Object?>) => Object?)
123
123
joe
null
1
joe
==========
1
null
1
1
{}
{}
10
0.4


====== return_expr.lox =====
___ TYPES ___
0:4 - 0:11     unlucky: a -> Bool
0:16 - 0:18    a -> Bool
1:4 - 1:10     online: a -> Bool
1:15 - 1:17    a -> Bool
2:4 - 2:19     is_auth_expired: a -> Bool
2:24 - 2:26    a -> Bool
4:4 - 4:11     connect: a -> .bad_luck | .connection({some_connection_details: Num, download: c -> String}) | .offline
4:16 - 4:17    a -> .bad_luck | .connection({some_connection_details: Num, download: c -> String}) | .offline
11:0 - 11:1    a -> .bad_luck | .connection({some_connection_details: Num, download: c -> String}) | .offline
5:15 - 5:16    Bool
5:7 - 5:14     unlucky: Unit -> Bool
5:22 - 5:28    .bad_luck | .connection({some_connection_details: Num, download: c -> String}) | .offline
5:30 - 5:38    bad_luck: .bad_luck | .connection({some_connection_details: Num, download: c -> String}) | .offline
6:7 - 6:8      !: Bool
6:15 - 6:16    Bool
6:8 - 6:14     online: Unit -> Bool
6:22 - 6:28    .bad_luck | .connection({some_connection_details: Num, download: c -> String}) | .offline
6:30 - 6:37    offline: .bad_luck | .connection({some_connection_details: Num, download: c -> String}) | .offline
7:4 - 7:10     .bad_luck | .connection({some_connection_details: Num, download: c -> String}) | .offline
7:12 - 7:22    connection: .bad_luck | .connection({some_connection_details: Num, download: c -> String}) | .offline
10:4 - 10:5    {...}: {some_connection_details: Num, download: c -> String}
8:8 - 8:31     some_connection_details: Num
9:8 - 9:16     download: c -> String
9:20 - 9:22    c -> String
13:4 - 13:12   download: {download: Unit -> b} -> .auth_expired | .download_interrupted | .the_data(b)
13:27 - 13:28  {download: Unit -> b} -> .auth_expired | .download_interrupted | .the_data(b)
18:0 - 18:1    {download: Unit -> b} -> .auth_expired | .download_interrupted | .the_data(b)
13:16 - 13:26  connection: {download: Unit -> b}
14:23 - 14:24  Bool
14:7 - 14:22   is_auth_expired: Unit -> Bool
14:30 - 14:36  .auth_expired | .download_interrupted | .the_data(b)
14:38 - 14:50  auth_expired: .auth_expired | .download_interrupted | .the_data(b)
15:15 - 15:16  Bool
15:7 - 15:14   unlucky: Unit -> Bool
15:22 - 15:28  .auth_expired | .download_interrupted | .the_data(b)
15:30 - 15:50  download_interrupted: .auth_expired | .download_interrupted | .the_data(b)
16:8 - 16:14   result: b
16:37 - 16:38  b
16:28 - 16:36  download: Unit -> b
16:17 - 16:27  connection: {download: Unit -> b}
17:4 - 17:10   .auth_expired | .download_interrupted | .the_data(b)
17:12 - 17:20  the_data: .auth_expired | .download_interrupted | .the_data(b)
17:21 - 17:27  result: b
20:4 - 20:24   connect_and_download: a -> .auth_expired | .bad_luck | .download_interrupted | .the_data(String)
20:29 - 20:30  a -> .auth_expired | .bad_luck | .download_interrupted | .the_data(String)
28:0 - 28:1    a -> .auth_expired | .bad_luck | .download_interrupted | .the_data(String)
21:8 - 21:18   connection: {some_connection_details: Num, download: c -> String}
21:21 - 21:26  match: {some_connection_details: Num, download: c -> String}
21:35 - 21:36  .auth_expired | .bad_luck | .connection({some_connection_details: Num, download: c -> String}) | .download_interrupted | .offline | .the_data(String)
21:27 - 21:34  connect: Unit -> .auth_expired | .bad_luck | .connection({some_connection_details: Num, download: c -> String}) | .download_interrupted | .offline | .the_data(String)
22:9 - 22:19   connection: .connection({some_connection_details: Num, download: c -> String})
22:20 - 22:21  c: {some_connection_details: Num, download: c -> String}
22:26 - 22:27  c: {some_connection_details: Num, download: c -> String}
23:9 - 23:16   offline: .offline
23:20 - 23:26  .auth_expired | .bad_luck | .download_interrupted | .the_data(String)
23:28 - 23:36  the_data: .auth_expired | .bad_luck | .download_interrupted | .the_data(String)
24:8 - 24:13   other: .auth_expired | .bad_luck | .download_interrupted | .the_data(String)
24:17 - 24:23  .auth_expired | .bad_luck | .download_interrupted | .the_data(String)
24:24 - 24:29  other: .auth_expired | .bad_luck | .download_interrupted | .the_data(String)
27:4 - 27:10   .auth_expired | .bad_luck | .download_interrupted | .the_data(String)
27:30 - 27:31  .auth_expired | .bad_luck | .download_interrupted | .the_data(String)
27:11 - 27:19  download: {some_connection_details: Num, download: Unit -> String} -> .auth_expired | .bad_luck | .download_interrupted | .the_data(String)
27:20 - 27:30  connection: {some_connection_details: Num, download: Unit -> String}
30:4 - 30:8    data: .auth_expired | .bad_luck | .download_interrupted | .the_data(String)
30:32 - 30:33  .auth_expired | .bad_luck | .download_interrupted | .the_data(String)
30:11 - 30:31  connect_and_download: Unit -> .auth_expired | .bad_luck | .download_interrupted | .the_data(String)
31:0 - 31:5    print: .auth_expired | .bad_luck | .download_interrupted | .the_data(String)
31:6 - 31:10   data: .auth_expired | .bad_luck | .download_interrupted | .the_data(String)
___ OUTPUT ___
.the_data(some default data)


====== scoping.lox =====
___ TYPES ___
1:4 - 1:5      a: String
3:6 - 3:12     show_a: a -> Unit
3:17 - 3:18    a -> Unit
5:2 - 5:3      a -> Unit
4:4 - 4:9      print: String
4:10 - 4:11    a: String
7:9 - 7:10     Unit
7:2 - 7:8      show_a: Unit -> Unit
8:6 - 8:7      a: String
9:9 - 9:10     Unit
9:2 - 9:8      show_a: Unit -> Unit
___ OUTPUT ___
global
global


====== tags.lox =====
___ TYPES ___
1:4 - 1:7      tab: .key(String)
1:11 - 1:14    key: .key(String)
2:4 - 2:10     center: .mouse({x: Num, y: Num})
2:14 - 2:19    mouse: .mouse({x: Num, y: Num})
2:33 - 2:34    {...}: {x: Num, y: Num}
2:21 - 2:22    x: Num
2:28 - 2:29    y: Num
3:4 - 3:16     key_or_mouse: .key(String) | .mouse({x: Num, y: Num})
3:25 - 3:26    ?: .key(String) | .mouse({x: Num, y: Num})
3:27 - 3:30    tab: .key(String) | .mouse({x: Num, y: Num})
3:33 - 3:39    center: .key(String) | .mouse({x: Num, y: Num})
5:4 - 5:6      fn: .key(String) | .mouse({x: Num}) -> String
5:12 - 5:14    .key(String) | .mouse({x: Num}) -> String
5:15 - 5:20    match: String
5:21 - 5:22    e: .key(String) | .mouse({x: Num})
6:5 - 6:8      key: .key(String)
6:9 - 6:13     char: String
6:18 - 6:22    char: String
7:5 - 7:10     mouse: .mouse({x: Num})
7:12 - 7:13    x: Num
7:26 - 7:27    ?: String
7:21 - 7:22    >: Bool
7:19 - 7:20    x: Num
5:10 - 5:11    e: .key(String) | .mouse({x: Num})
10:0 - 10:5    print: String
10:12 - 10:13  String
10:6 - 10:8    fn: .key(String) | .mouse({x: Num}) -> String
10:9 - 10:12   tab: .key(String) | .mouse({x: Num})
11:0 - 11:5    print: String
11:15 - 11:16  String
11:6 - 11:8    fn: .key(String) | .mouse({y: Num, x: Num}) -> String
11:9 - 11:15   center: .key(String) | .mouse({x: Num, y: Num})
12:0 - 12:5    print: String
12:21 - 12:22  String
12:6 - 12:8    fn: .key(String) | .mouse({y: Num, x: Num}) -> String
12:9 - 12:21   key_or_mouse: .key(String) | .mouse({x: Num, y: Num})
14:4 - 14:10   colors: List[.gold | .green | .red]
14:33 - 14:34  [...]: List[.gold | .green | .red]
14:15 - 14:20  green: .gold | .green | .red
14:23 - 14:27  gold: .gold | .green | .red
14:30 - 14:33  red: .gold | .green | .red
15:4 - 15:13   fav_color: .gold | .green | .red
15:23 - 15:25  \>: .gold | .green | .red
15:16 - 15:22  colors: List[.gold | .green | .red]
15:31 - 15:36  first: List[.gold | .green | .red] -> .gold | .green | .red
15:26 - 15:30  List: {first: List[.gold | .green | .red] -> .gold | .green | .red, rest: List[b] -> List[b], empty: List[c] -> Bool}
16:0 - 16:5    print: String
16:6 - 16:11   match: String
16:12 - 16:21  fav_color: .gold | .green | .red
17:5 - 17:10   green: .green
18:5 - 18:9    gold: .gold
19:5 - 19:8    red: .red
22:0 - 22:6    assert: Bool
22:46 - 22:48  ==: Bool
22:7 - 22:12   match: Num
22:13 - 22:22  fav_color: .gold | .green | .red
22:26 - 22:30  gold: .gold
22:37 - 22:39  _0: .green | .red
24:0 - 24:6    assert: Bool
41:2 - 41:4    ==: Bool
24:7 - 24:12   match: Num
32:2 - 32:4    \>: .dark(.none | .some(String)) | .light(.none | .some(String))
32:0 - 32:1    [...]: List[.dark(.none | .some(String)) | .light(.none | .some(String))]
25:5 - 25:9    dark: .dark(.none | .some(String)) | .light(.none | .some(String))
25:11 - 25:15  some: .none | .some(String)
26:5 - 26:10   light: .dark(.none | .some(String)) | .light(.none | .some(String))
26:12 - 26:16  none: .none | .some(String)
27:5 - 27:9    dark: .dark(.none | .some(String)) | .light(.none | .some(String))
27:11 - 27:15  none: .none | .some(String)
28:5 - 28:9    dark: .dark(.none | .some(String)) | .light(.none | .some(String))
28:11 - 28:15  some: .none | .some(String)
29:5 - 29:9    dark: .dark(.none | .some(String)) | .light(.none | .some(String))
29:11 - 29:15  none: .none | .some(String)
30:5 - 30:10   light: .dark(.none | .some(String)) | .light(.none | .some(String))
30:12 - 30:16  some: .none | .some(String)
31:5 - 31:10   light: .dark(.none | .some(String)) | .light(.none | .some(String))
31:12 - 31:16  some: .none | .some(String)
32:10 - 32:15  first: List[.dark(.none | .some(String)) | .light(.none | .some(String))] -> .dark(.none | .some(String)) | .light(.none | .some(String))
32:5 - 32:9    List: {first: List[.dark(.none | .some(String)) | .light(.none | .some(String))] -> .dark(.none | .some(String)) | .light(.none | .some(String)), rest: List[a] -> List[a], empty: List[b] -> Bool}
33:5 - 33:10   light: .light(.none | .some(String))
33:11 - 33:14  str: .none | .some(String)
33:18 - 33:23  match: Num
33:24 - 33:27  str: .none | .some(String)
34:9 - 34:13   some: .some(String)
34:14 - 34:16  _1: String
35:9 - 35:13   none: .none
37:5 - 37:9    dark: .dark(.none | .some(String))
37:10 - 37:13  str: .none | .some(String)
37:18 - 37:23  match: Num
37:24 - 37:27  str: .none | .some(String)
38:9 - 38:13   some: .some(String)
38:14 - 38:16  _2: String
39:9 - 39:13   none: .none
43:0 - 43:6    assert: Bool
60:2 - 60:4    ==: Bool
43:7 - 43:12   match: Num
51:2 - 51:4    \>: .dark({title: .none | .some(String), subtitle: String}) | .light({title: .none | .some(String), subtitle: String})
51:0 - 51:1    [...]: List[.dark({title: .none | .some(String), subtitle: String}) | .light({title: .none | .some(String), subtitle: String})]
44:5 - 44:9    dark: .dark({title: .none | .some(String), subtitle: String}) | .light({title: .none | .some(String), subtitle: String})
44:46 - 44:47  {...}: {title: .none | .some(String), subtitle: String}
44:11 - 44:16  title: .none | .some(String)
44:19 - 44:23  some: .none | .some(String)
44:31 - 44:39  subtitle: String
45:5 - 45:10   light: .dark({title: .none | .some(String), subtitle: String}) | .light({title: .none | .some(String), subtitle: String})
45:41 - 45:42  {...}: {title: .none | .some(String), subtitle: String}
45:12 - 45:17  title: .none | .some(String)
45:20 - 45:24  none: .none | .some(String)
45:26 - 45:34  subtitle: String
46:5 - 46:9    dark: .dark({title: .none | .some(String), subtitle: String}) | .light({title: .none | .some(String), subtitle: String})
46:40 - 46:41  {...}: {title: .none | .some(String), subtitle: String}
46:11 - 46:16  title: .none | .some(String)
46:19 - 46:23  none: .none | .some(String)
46:25 - 46:33  subtitle: String
47:5 - 47:9    dark: .dark({title: .none | .some(String), subtitle: String}) | .light({title: .none | .some(String), subtitle: String})
47:46 - 47:47  {...}: {title: .none | .some(String), subtitle: String}
47:11 - 47:16  title: .none | .some(String)
47:19 - 47:23  some: .none | .some(String)
47:31 - 47:39  subtitle: String
48:5 - 48:9    dark: .dark({title: .none | .some(String), subtitle: String}) | .light({title: .none | .some(String), subtitle: String})
48:40 - 48:41  {...}: {title: .none | .some(String), subtitle: String}
48:11 - 48:16  title: .none | .some(String)
48:19 - 48:23  none: .none | .some(String)
48:25 - 48:33  subtitle: String
49:5 - 49:10   light: .dark({title: .none | .some(String), subtitle: String}) | .light({title: .none | .some(String), subtitle: String})
49:47 - 49:48  {...}: {title: .none | .some(String), subtitle: String}
49:12 - 49:17  title: .none | .some(String)
49:20 - 49:24  some: .none | .some(String)
49:32 - 49:40  subtitle: String
50:5 - 50:10   light: .dark({title: .none | .some(String), subtitle: String}) | .light({title: .none | .some(String), subtitle: String})
50:48 - 50:49  {...}: {title: .none | .some(String), subtitle: String}
50:12 - 50:17  title: .none | .some(String)
50:20 - 50:24  some: .none | .some(String)
50:33 - 50:41  subtitle: String
51:10 - 51:15  first: List[.dark({title: .none | .some(String), subtitle: String}) | .light({title: .none | .some(String), subtitle: String})] -> .dark({title: .none | .some(String), subtitle: String}) | .light({title: .none | .some(String), subtitle: String})
51:5 - 51:9    List: {first: List[.dark({title: .none | .some(String), subtitle: String}) | .light({title: .none | .some(String), subtitle: String})] -> .dark({title: .none | .some(String), subtitle: String}) | .light({title: .none | .some(String), subtitle: String}), rest: List[a] -> List[a], empty: List[b] -> Bool}
52:5 - 52:10   light: .light({subtitle: String, title: .none | .some(String)})
52:12 - 52:17  title: .none | .some(String)
52:23 - 52:28  match: Num
52:29 - 52:34  title: .none | .some(String)
53:9 - 53:13   some: .some(String)
53:14 - 53:16  _3: String
54:9 - 54:13   none: .none
56:5 - 56:9    dark: .dark({subtitle: String, title: .none | .some(String)})
56:11 - 56:16  title: .none | .some(String)
56:22 - 56:27  match: Num
56:28 - 56:33  title: .none | .some(String)
57:9 - 57:13   some: .some(String)
57:14 - 57:16  _4: String
58:9 - 58:13   none: .none
62:0 - 62:6    assert: Bool
73:2 - 73:4    ==: Bool
62:7 - 62:12   match: Num
70:2 - 70:4    \>: .dark({title: .none | .some(String), subtitle: String}) | .light({title: .none | .some(String), subtitle: String})
70:0 - 70:1    [...]: List[.dark({title: .none | .some(String), subtitle: String}) | .light({title: .none | .some(String), subtitle: String})]
63:5 - 63:9    dark: .dark({title: .none | .some(String), subtitle: String}) | .light({title: .none | .some(String), subtitle: String})
63:46 - 63:47  {...}: {title: .none | .some(String), subtitle: String}
63:11 - 63:16  title: .none | .some(String)
63:19 - 63:23  some: .none | .some(String)
63:31 - 63:39  subtitle: String
64:5 - 64:10   light: .dark({title: .none | .some(String), subtitle: String}) | .light({title: .none | .some(String), subtitle: String})
64:41 - 64:42  {...}: {title: .none | .some(String), subtitle: String}
64:12 - 64:17  title: .none | .some(String)
64:20 - 64:24  none: .none | .some(String)
64:26 - 64:34  subtitle: String
65:5 - 65:9    dark: .dark({title: .none | .some(String), subtitle: String}) | .light({title: .none | .some(String), subtitle: String})
65:40 - 65:41  {...}: {title: .none | .some(String), subtitle: String}
65:11 - 65:16  title: .none | .some(String)
65:19 - 65:23  none: .none | .some(String)
65:25 - 65:33  subtitle: String
66:5 - 66:9    dark: .dark({title: .none | .some(String), subtitle: String}) | .light({title: .none | .some(String), subtitle: String})
66:46 - 66:47  {...}: {title: .none | .some(String), subtitle: String}
66:11 - 66:16  title: .none | .some(String)
66:19 - 66:23  some: .none | .some(String)
66:31 - 66:39  subtitle: String
67:5 - 67:9    dark: .dark({title: .none | .some(String), subtitle: String}) | .light({title: .none | .some(String), subtitle: String})
67:40 - 67:41  {...}: {title: .none | .some(String), subtitle: String}
67:11 - 67:16  title: .none | .some(String)
67:19 - 67:23  none: .none | .some(String)
67:25 - 67:33  subtitle: String
68:5 - 68:10   light: .dark({title: .none | .some(String), subtitle: String}) | .light({title: .none | .some(String), subtitle: String})
68:47 - 68:48  {...}: {title: .none | .some(String), subtitle: String}
68:12 - 68:17  title: .none | .some(String)
68:20 - 68:24  some: .none | .some(String)
68:32 - 68:40  subtitle: String
69:5 - 69:10   light: .dark({title: .none | .some(String), subtitle: String}) | .light({title: .none | .some(String), subtitle: String})
69:48 - 69:49  {...}: {title: .none | .some(String), subtitle: String}
69:12 - 69:17  title: .none | .some(String)
69:20 - 69:24  some: .none | .some(String)
69:33 - 69:41  subtitle: String
70:10 - 70:15  first: List[.dark({title: .none | .some(String), subtitle: String}) | .light({title: .none | .some(String), subtitle: String})] -> .dark({title: .none | .some(String), subtitle: String}) | .light({title: .none | .some(String), subtitle: String})
70:5 - 70:9    List: {first: List[.dark({title: .none | .some(String), subtitle: String}) | .light({title: .none | .some(String), subtitle: String})] -> .dark({title: .none | .some(String), subtitle: String}) | .light({title: .none | .some(String), subtitle: String}), rest: List[c] -> List[c], empty: List[d] -> Bool}
71:5 - 71:9    dark: .dark({subtitle: String, title: .none | .some(String)})
71:11 - 71:16  title: .none | .some(String)
72:5 - 72:10   light: .light({subtitle: String, title: .none | .some(String)})
72:12 - 72:17  title: .none | .some(String)
75:4 - 75:5    a: a -> .err(.missing) | .ok(Num)
75:10 - 75:12  a -> .err(.missing) | .ok(Num)
75:38 - 75:40  \>: .err(.missing) | .ok(Num)
75:36 - 75:37  [...]: List[.err(.missing) | .ok(Num)]
75:15 - 75:17  ok: .err(.missing) | .ok(Num)
75:23 - 75:26  err: .err(.missing) | .ok(Num)
75:28 - 75:35  missing: .missing
75:46 - 75:51  first: List[.err(.missing) | .ok(Num)] -> .err(.missing) | .ok(Num)
75:41 - 75:45  List: {first: List[.err(.missing) | .ok(Num)] -> .err(.missing) | .ok(Num), rest: List[d] -> List[d], empty: List[e] -> Bool}
76:4 - 76:5    b: a -> .err(.denied(String)) | .ok({first: String, last: String})
76:10 - 76:12  a -> .err(.denied(String)) | .ok({first: String, last: String})
76:72 - 76:74  \>: .err(.denied(String)) | .ok({first: String, last: String})
76:70 - 76:71  [...]: List[.err(.denied(String)) | .ok({first: String, last: String})]
76:15 - 76:17  ok: .err(.denied(String)) | .ok({first: String, last: String})
76:46 - 76:47  {...}: {first: String, last: String}
76:19 - 76:24  first: String
76:33 - 76:37  last: String
76:51 - 76:54  err: .err(.denied(String)) | .ok({first: String, last: String})
76:56 - 76:62  denied: .denied(String)
76:80 - 76:85  first: List[.err(.denied(String)) | .ok({first: String, last: String})] -> .err(.denied(String)) | .ok({first: String, last: String})
76:75 - 76:79  List: {first: List[.err(.denied(String)) | .ok({first: String, last: String})] -> .err(.denied(String)) | .ok({first: String, last: String}), rest: List[d] -> List[d], empty: List[e] -> Bool}
77:4 - 77:5    c: a -> .err(.missing | .this_should_not_be_in_the_final_return_type) | .ok({found: Num})
77:10 - 77:12  a -> .err(.missing | .this_should_not_be_in_the_final_return_type) | .ok({found: Num})
77:100 - 77:102 \>: .err(.missing | .this_should_not_be_in_the_final_return_type) | .ok({found: Num})
77:98 - 77:99  [...]: List[.err(.missing | .this_should_not_be_in_the_final_return_type) | .ok({found: Num})]
77:15 - 77:17  ok: .err(.missing | .this_should_not_be_in_the_final_return_type) | .ok({found: Num})
77:28 - 77:29  {...}: {found: Num}
77:19 - 77:24  found: Num
77:33 - 77:36  err: .err(.missing | .this_should_not_be_in_the_final_return_type) | .ok({found: Num})
77:38 - 77:45  missing: .missing | .this_should_not_be_in_the_final_return_type
77:49 - 77:52  err: .err(.missing | .this_should_not_be_in_the_final_return_type) | .ok({found: Num})
77:54 - 77:97  this_should_not_be_in_the_final_return_type: .missing | .this_should_not_be_in_the_final_return_type
77:108 - 77:113 first: List[.err(.missing | .this_should_not_be_in_the_final_return_type) | .ok({found: Num})] -> .err(.missing | .this_should_not_be_in_the_final_return_type) | .ok({found: Num})
77:103 - 77:107 List: {first: List[.err(.missing | .this_should_not_be_in_the_final_return_type) | .ok({found: Num})] -> .err(.missing | .this_should_not_be_in_the_final_return_type) | .ok({found: Num}), rest: List[d] -> List[d], empty: List[e] -> Bool}
78:4 - 78:5    d: a -> .err(.fatal | .timeout) | .ok({data: String, another: Num})
78:10 - 78:12  a -> .err(.fatal | .timeout) | .ok({data: String, another: Num})
78:74 - 78:76  \>: .err(.fatal | .timeout) | .ok({data: String, another: Num})
78:72 - 78:73  [...]: List[.err(.fatal | .timeout) | .ok({data: String, another: Num})]
78:15 - 78:17  ok: .err(.fatal | .timeout) | .ok({data: String, another: Num})
78:40 - 78:41  {...}: {data: String, another: Num}
78:19 - 78:23  data: String
78:30 - 78:37  another: Num
78:45 - 78:48  err: .err(.fatal | .timeout) | .ok({data: String, another: Num})
78:50 - 78:57  timeout: .fatal | .timeout
78:61 - 78:64  err: .err(.fatal | .timeout) | .ok({data: String, another: Num})
78:66 - 78:71  fatal: .fatal | .timeout
78:82 - 78:87  first: List[.err(.fatal | .timeout) | .ok({data: String, another: Num})] -> .err(.fatal | .timeout) | .ok({data: String, another: Num})
78:77 - 78:81  List: {first: List[.err(.fatal | .timeout) | .ok({data: String, another: Num})] -> .err(.fatal | .timeout) | .ok({data: String, another: Num}), rest: List[d] -> List[d], empty: List[e] -> Bool}
79:4 - 79:5    e: a -> {the_result: .err(.fatal | .timeout) | .ok({data: String, another: Num})}
79:10 - 79:12  a -> {the_result: .err(.fatal | .timeout) | .ok({data: String, another: Num})}
79:101 - 79:102 {...}: {the_result: .err(.fatal | .timeout) | .ok({data: String, another: Num})}
79:14 - 79:24  the_result: .err(.fatal | .timeout) | .ok({data: String, another: Num})
79:88 - 79:90  \>: .err(.fatal | .timeout) | .ok({data: String, another: Num})
79:86 - 79:87  [...]: List[.err(.fatal | .timeout) | .ok({data: String, another: Num})]
79:29 - 79:31  ok: .err(.fatal | .timeout) | .ok({data: String, another: Num})
79:54 - 79:55  {...}: {data: String, another: Num}
79:33 - 79:37  data: String
79:44 - 79:51  another: Num
79:59 - 79:62  err: .err(.fatal | .timeout) | .ok({data: String, another: Num})
79:64 - 79:71  timeout: .fatal | .timeout
79:75 - 79:78  err: .err(.fatal | .timeout) | .ok({data: String, another: Num})
79:80 - 79:85  fatal: .fatal | .timeout
79:96 - 79:101 first: List[.err(.fatal | .timeout) | .ok({data: String, another: Num})] -> .err(.fatal | .timeout) | .ok({data: String, another: Num})
79:91 - 79:95  List: {first: List[.err(.fatal | .timeout) | .ok({data: String, another: Num})] -> .err(.fatal | .timeout) | .ok({data: String, another: Num}), rest: List[d] -> List[d], empty: List[e] -> Bool}
80:4 - 80:6    ee: a, b -> .err(.idk) | .ok({hello: String})
80:12 - 80:14  a, b -> .err(.idk) | .ok({hello: String})
80:18 - 80:20  b -> .err(.idk) | .ok({hello: String})
80:57 - 80:59  \>: .err(.idk) | .ok({hello: String})
80:55 - 80:56  [...]: List[.err(.idk) | .ok({hello: String})]
80:23 - 80:25  ok: .err(.idk) | .ok({hello: String})
80:41 - 80:42  {...}: {hello: String}
80:27 - 80:32  hello: String
80:46 - 80:49  err: .err(.idk) | .ok({hello: String})
80:51 - 80:54  idk: .idk
80:65 - 80:70  first: List[.err(.idk) | .ok({hello: String})] -> .err(.idk) | .ok({hello: String})
80:60 - 80:64  List: {first: List[.err(.idk) | .ok({hello: String})] -> .err(.idk) | .ok({hello: String}), rest: List[e] -> List[e], empty: List[f] -> Bool}
80:16 - 80:18  _6: b
80:10 - 80:12  _5: a
81:4 - 81:7    eee: a -> .err(.timeout) | .ok(d -> d)
81:12 - 81:14  a -> .err(.timeout) | .ok(d -> d)
81:46 - 81:48  \>: .err(.timeout) | .ok(d -> d)
81:44 - 81:45  [...]: List[.err(.timeout) | .ok(d -> d)]
81:17 - 81:19  ok: .err(.timeout) | .ok(d -> d)
81:23 - 81:25  d -> d
81:26 - 81:27  x: d
81:21 - 81:22  x: d
81:31 - 81:34  err: .err(.timeout) | .ok(d -> d)
81:36 - 81:43  timeout: .timeout
81:54 - 81:59  first: List[.err(.timeout) | .ok(d -> d)] -> .err(.timeout) | .ok(d -> d)
81:49 - 81:53  List: {first: List[.err(.timeout) | .ok(d -> d)] -> .err(.timeout) | .ok(d -> d), rest: List[e] -> List[e], empty: List[f] -> Bool}
82:4 - 82:8    eeee: a -> .err(.timeout) | .ok({id: d -> d})
82:13 - 82:15  a -> .err(.timeout) | .ok({id: d -> d})
82:53 - 82:55  \>: .err(.timeout) | .ok({id: d -> d})
82:51 - 82:52  [...]: List[.err(.timeout) | .ok({id: d -> d})]
82:18 - 82:20  ok: .err(.timeout) | .ok({id: d -> d})
82:33 - 82:34  {...}: {id: d -> d}
82:22 - 82:24  id: d -> d
82:29 - 82:31  d -> d
82:32 - 82:33  x: d
82:27 - 82:28  x: d
82:38 - 82:41  err: .err(.timeout) | .ok({id: d -> d})
82:43 - 82:50  timeout: .timeout
82:61 - 82:66  first: List[.err(.timeout) | .ok({id: d -> d})] -> .err(.timeout) | .ok({id: d -> d})
82:56 - 82:60  List: {first: List[.err(.timeout) | .ok({id: d -> d})] -> .err(.timeout) | .ok({id: d -> d}), rest: List[e] -> List[e], empty: List[f] -> Bool}
83:4 - 83:5    f: a -> .err(.denied(String) | .fatal | .idk | .missing | .timeout) | .ok(Bool)
83:10 - 83:11  a -> .err(.denied(String) | .fatal | .idk | .missing | .timeout) | .ok(Bool)
96:0 - 96:1    a -> .err(.denied(String) | .fatal | .idk | .missing | .timeout) | .ok(Bool)
84:8 - 84:11   num: Num
84:16 - 84:17  .err(.denied(String) | .fatal | .idk | .missing | .timeout) | .ok(Num)
84:14 - 84:15  a: Unit -> .err(.denied(String) | .fatal | .idk | .missing | .timeout) | .ok(Num)
85:10 - 85:15  first: String
85:22 - 85:23  .err(.denied(String) | .fatal | .idk | .missing | .timeout) | .ok({first: String, last: String})
85:20 - 85:21  b: Unit -> .err(.denied(String) | .fatal | .idk | .missing | .timeout) | .ok({first: String, last: String})
86:10 - 86:15  found: Num
86:22 - 86:23  .err(.missing | .this_should_not_be_in_the_final_return_type) | .ok({found: Num})
86:20 - 86:21  c: Unit -> .err(.missing | .this_should_not_be_in_the_final_return_type) | .ok({found: Num})
86:36 - 86:37  {...}: {found: Num}
86:28 - 86:33  found: Num
87:8 - 87:18   precedence: Num
87:26 - 87:33  another: Num
87:23 - 87:24  .err(.denied(String) | .fatal | .idk | .missing | .timeout) | .ok({data: String, another: Num})
87:21 - 87:22  d: Unit -> .err(.denied(String) | .fatal | .idk | .missing | .timeout) | .ok({data: String, another: Num})
88:8 - 88:14   result: .err(.fatal | .timeout) | .ok({data: String, another: Num})
88:19 - 88:20  .err(.fatal | .timeout) | .ok({data: String, another: Num})
88:17 - 88:18  d: Unit -> .err(.fatal | .timeout) | .ok({data: String, another: Num})
89:8 - 89:19   precedence2: Num
89:30 - 89:37  another: Num
89:22 - 89:28  result: .err(.denied(String) | .fatal | .idk | .missing | .timeout) | .ok({data: String, another: Num})
90:10 - 90:17  another: Num
90:26 - 90:36  the_result: .err(.denied(String) | .fatal | .idk | .missing | .timeout) | .ok({data: String, another: Num})
90:24 - 90:25  {the_result: .err(.denied(String) | .fatal | .idk | .missing | .timeout) | .ok({data: String, another: Num})}
90:22 - 90:23  e: Unit -> {the_result: .err(.denied(String) | .fatal | .idk | .missing | .timeout) | .ok({data: String, another: Num})}
91:10 - 91:15  hello: String
91:22 - 91:24  \>: .err(.denied(String) | .fatal | .idk | .missing | .timeout) | .ok({hello: String})
91:29 - 91:30  Num -> .err(.denied(String) | .fatal | .idk | .missing | .timeout) | .ok({hello: String})
91:25 - 91:27  ee: Num, Num -> .err(.denied(String) | .fatal | .idk | .missing | .timeout) | .ok({hello: String})
92:8 - 92:11   str: String
92:24 - 92:25  String
92:18 - 92:19  .err(.denied(String) | .fatal | .idk | .missing | .timeout) | .ok(String -> String)
92:14 - 92:17  eee: Unit -> .err(.denied(String) | .fatal | .idk | .missing | .timeout) | .ok(String -> String)
93:8 - 93:12   bool: Bool
93:31 - 93:32  Bool
93:23 - 93:25  id: Bool -> Bool
93:20 - 93:21  .err(.denied(String) | .fatal | .idk | .missing | .timeout) | .ok({id: Bool -> Bool})
93:15 - 93:19  eeee: Unit -> .err(.denied(String) | .fatal | .idk | .missing | .timeout) | .ok({id: Bool -> Bool})
94:4 - 94:9    print: {num: Num, first: String, found: Num, precedence: Num, precedence2: Num, another: Num, hello: String, str: String, bool: Bool}
94:82 - 94:83  {...}: {num: Num, first: String, found: Num, precedence: Num, precedence2: Num, another: Num, hello: String, str: String, bool: Bool}
94:12 - 94:15  num: Num
94:12 - 94:15  num: Num
94:17 - 94:22  first: String
94:17 - 94:22  first: String
94:24 - 94:29  found: Num
94:24 - 94:29  found: Num
94:31 - 94:41  precedence: Num
94:31 - 94:41  precedence: Num
94:43 - 94:54  precedence2: Num
94:43 - 94:54  precedence2: Num
94:56 - 94:63  another: Num
94:56 - 94:63  another: Num
94:65 - 94:70  hello: String
94:65 - 94:70  hello: String
94:72 - 94:75  str: String
94:72 - 94:75  str: String
94:77 - 94:81  bool: Bool
94:77 - 94:81  bool: Bool
95:4 - 95:10   .err(.denied(String) | .fatal | .idk | .missing | .timeout) | .ok(Bool)
95:12 - 95:14  ok: .err(.denied(String) | .fatal | .idk | .missing | .timeout) | .ok(Bool)
97:0 - 97:6    assert: Bool
97:11 - 97:13  ==: Bool
97:9 - 97:10   .err(.denied(String) | .fatal | .idk | .missing | .timeout) | .ok(Bool)
97:7 - 97:8    f: Unit -> .err(.denied(String) | .fatal | .idk | .missing | .timeout) | .ok(Bool)
97:15 - 97:17  ok: .err(.denied(String) | .fatal | .idk | .missing | .timeout) | .ok(Bool)
___ OUTPUT ___
\t
bottom
bottom
green
{num: 5, first: bob, found: 10, precedence: 1, precedence2: 1, another: 1, hello: world, str: a, bool: false}


====== tag_pattern_err_let.lox =====
___ Type checking failed ___
(Lambda(null, [Instance of 'Identifier'], FunctionBody(Instance of 'Block')), Tag patterns can only be used in match expressions.)
___ Continuing with execution ___
___ OUTPUT ___
LoxRuntimeException{token: identifier foo (ln3:9), message: Tag patterns can only be used in match expressions.}


====== tag_pattern_err_let_no_payload.lox =====
___ Type checking failed ___
(Lambda(null, [Instance of 'Identifier'], FunctionBody(Instance of 'Block')), Tag patterns can only be used in match expressions.)
___ Continuing with execution ___
___ OUTPUT ___
LoxRuntimeException{token: identifier foo (ln3:9), message: Tag patterns can only be used in match expressions.}


====== tag_pattern_err_param.lox =====
___ Type checking failed ___
(Lambda(null, [Instance of 'TagPattern'], FunctionBody(Instance of 'Block')), Tag patterns can only be used in match expressions.)
___ Continuing with execution ___
___ OUTPUT ___
LoxRuntimeException{token: identifier foo (ln2:10), message: Tag patterns can only be used in match expressions.}


====== tag_pattern_err_param_no_payload.lox =====
___ Type checking failed ___
(Lambda(null, [Instance of 'TagPattern'], FunctionBody(Instance of 'Block')), Tag patterns can only be used in match expressions.)
___ Continuing with execution ___
___ OUTPUT ___
LoxRuntimeException{token: identifier foo (ln2:10), message: Tag patterns can only be used in match expressions.}

