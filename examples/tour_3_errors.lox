// Functions that can fail should return `.ok(data)` on success or `.err(e)` on error.
let sell_eggs = \amount, stock {

    if stock.eggs == 0
    then return .err(.out_of_stock);

    if stock.eggs < amount
    then return .err(.insufficient_stock(stock.eggs));

    let new_stock = {
        ..stock,
        eggs: stock.eggs - amount,
    };

    return .ok(new_stock);
};


// Use the ! operator inside a function to extract the payload from an `.ok` variant,
// or else return from the function with the `.err` variant.
let process = \ {
    let stock = { eggs: 5, bacon: 1 };

    let new_stock = sell_eggs(5, stock)!;

    let status = new_stock.eggs < 2
        ? .low_stock(new_stock.eggs)
        : .done;

    return .ok(status);
};

print match process() {
    .ok(status) -> match status {
        .done -> "no problems",
        .low_stock(_) -> "finished but low stock",
    },
    .err(e) -> match e {
        .out_of_stock -> "out of stock",
        .insufficient_stock(amount) -> "tried to buy too many"
    }
};


// Use the ?? operator to extract the payload from an `.ok` variant,
// or provide a fallback value if it's an `.err` variant.
let download = \url -> true ? .ok("some data") : .err(.offline);
print download() ?? "some default data";
