let {zipWithTail, countWhere, first, all} = import "util/lists.lox";
let {minus, sign, abs} = import "util/numeric.lox";

let input = [
    [7, 6, 4, 2, 1],
    [1, 2, 7, 8, 9],
    [9, 7, 6, 2, 1],
    [1, 3, 2, 4, 5],
    [8, 6, 4, 4, 1],
    [1, 3, 6, 7, 9],
];

let isSafe = \list {
    let diffs = list \> zipWithTail(_, minus);
    let firstDirection = diffs \> first \> sign;
    return all(
        diffs,
        \diff -> (diff \> sign) == firstDirection
             and (diff \> abs) >= 1
             and (diff \> abs) <= 3
    );
};

/////// Part 1 ///////

let totalSafe = input \> countWhere(_, isSafe);
print totalSafe;
assert totalSafe == 2;