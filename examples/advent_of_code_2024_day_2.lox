let {elements, zip_with_tail, count_where, all, enumerated, fold_until, drop_at, map, any} = import "util/lists.lox";
let {minus, sign, abs} = import "util/numeric.lox";

let input = [
    [7, 6, 4, 2, 1],
    [1, 2, 7, 8, 9],
    [9, 7, 6, 2, 1],
    [1, 3, 2, 4, 5],
    [8, 6, 4, 4, 1],
    [1, 3, 6, 7, 9],
];

let is_safe = \list {
    let diffs = list \> zip_with_tail(minus);
    let first_direction = match diffs \> elements {
        .err(_) -> return false,
        .ok({first}) -> first \> sign,
    };
    return diffs \> all(
        \diff ->
            diff \> sign == first_direction and
            diff \> abs >= 1 and
            diff \> abs <= 3
    );
};

/////// Part 1 ///////

let part_1 = input \> count_where(is_safe);
print part_1;
assert part_1 == 2;

/////// Part 2 ///////


let part_2 = input \> count_where(
    \list ->
        list \> is_safe or
        list \> enumerated
             \> map(\{index} -> list \> drop_at(index))
             \> any(is_safe)
);
print part_2;
assert part_2 == 4;
