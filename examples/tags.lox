
let tab = .key("\t");
let center = .mouse({x: 50, y: 50});
let key_or_mouse = false ? tab : center;

let fn = \e -> match e {
    .key(char) -> char,
    .mouse({x}) -> x > 50 ? "top" : "bottom",
};

print fn(tab);
print fn(center);
print fn(key_or_mouse);

let colors = [.green, .gold, .red];
let fav_color = colors \> List.first;
print match fav_color {
    .green -> "green",
    .gold -> "gold",
    .red -> "red",
};

assert match fav_color { .gold -> 1, _ -> 2 } == 2;

assert match [
    .dark(.some("oh")),
    .light(.none),
    .dark(.none),
    .dark(.some("hi")),
    .dark(.none),
    .light(.some("ok")),
    .light(.some("yep")),
] \> List.first {
    .light(str)-> match str {
        .some(_) -> 1,
        .none -> 2,
    },
    .dark(str) -> match str {
        .some(_) -> 3,
        .none -> 4,
    },
} == 3;

assert match [
    .dark({title: .some("oh"), subtitle: "hmm"}),
    .light({title: .none, subtitle: "hmm"}),
    .dark({title: .none, subtitle: "hmm"}),
    .dark({title: .some("hi"), subtitle: "hmm"}),
    .dark({title: .none, subtitle: "hmm"}),
    .light({title: .some("ok"), subtitle: "hmm"}),
    .light({title: .some("yep"), subtitle: "hmm"}),
] \> List.first {
    .light({title}) -> match title {
        .some(_) -> 1,
        .none -> 2,
    },
    .dark({title}) -> match title {
        .some(_) -> 3,
        .none -> 4,
    },
} == 3;

assert match [
    .dark({title: .some("oh"), subtitle: "hmm"}),
    .light({title: .none, subtitle: "hmm"}),
    .dark({title: .none, subtitle: "hmm"}),
    .dark({title: .some("hi"), subtitle: "hmm"}),
    .dark({title: .none, subtitle: "hmm"}),
    .light({title: .some("ok"), subtitle: "hmm"}),
    .light({title: .some("yep"), subtitle: "hmm"}),
] \> List.first {
    .dark({title})  -> 1,
    .light({title}) -> 2,
} == 1;

let a = \ -> [.ok(5), .err(.missing)] \> List.first;
let b = \ -> [.ok({first: "bob", last: "vance"}), .err(.denied("nah"))] \> List.first;
let c = \ -> [.ok({found: 10}), .err(.missing), .err(.this_should_not_be_in_the_final_return_type)] \> List.first;
let d = \ -> [.ok({data: "a", another: 1}), .err(.timeout), .err(.fatal)] \> List.first;
let e = \ -> {the_result : [.ok({data: "a", another: 1}), .err(.timeout), .err(.fatal)] \> List.first};
let f = \ {
    let num = a()!;
    let { first } = b()!;
    let { found } = c() ?? {found: 0};
    let precedence = d()!.another;
    let result = d();
    let precedence2 = result!.another;
    let { another } = e().the_result!;
    print { num, first, found, precedence, precedence2, another };
    return .ok(true);
};
assert f() == .ok(true);
