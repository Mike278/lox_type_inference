let foo = \ { return 123; };


let someRecord = {
    a: "one",
    b: 2,
    c: false,
    d: foo
};

print someRecord;

print someRecord.a;
print someRecord.d;
let tearoff = someRecord.d;
print tearoff();

print someRecord.d();

let ok = \name {
    return {
        first: name,
        last: nil,
        nested: {
            another: 1
        },
        name: name
    };
};

let user = ok("joe");
print user.first;
print user.last;
print user.nested.another;
print user.name;

print "==========";

let user2 = ok(1);
print user2.first;
print user2.last;
print user2.nested.another;
print user2.name;

let emptyRecord = {};
print emptyRecord;
print {};

let r1 = {a: "a"};
let r2 = {..r1, b: false};
let r3 = {..r1, b: true, c: 1};
let r4 = {..r1};
let r5 = {..r1, a: "b"};
let r6 = {..r1, a: true};
print r1;
print r2;
print r3;
print r2.b;
print r3.b;
print r4;
print r5;
print r6;
