let foo = \ { return 123; };


let someRecord = {
    a: "one",
    b: 2,
    c: false,
    d: foo
};

print someRecord;

print someRecord.a;
print someRecord.d;
let tearoff = someRecord.d;
print tearoff();

print someRecord.d();

let ok = \name {
    return {
        first: name,
        last: nil,
        nested: {
            another: 1
        },
        name: name
    };
};

let user = ok("joe");
print user.first;
print user.last;
print user.nested.another;
print user.name;

print "==========";

let user2 = ok(1);
print user2.first;
print user2.last;
print user2.nested.another;
print user2.name;

let emptyRecord = {};
print emptyRecord;
print {};

let r1 = {a: "a"};
let r2 = {..r1, b: false};
let r3 = {..r1, b: true, c: 1};
let r4 = {..r1};
let r5 = {..r1, a: "b"};
let r6 = {..r1, a: true};

assert r1 == {a: "a"};
assert r2 == {a: "a", b: false};
assert r2.b == false;
assert r3 == {a: "a", b: true, c: 1};
assert r3.b == true;
assert r4 == {a: "a"};
assert r5 == {a: "b"};
assert r6 == {a: true};



let named = \r, name -> {..r, name: name};

let x1 = {title: "a", name: "some name"};
let y1 = named(x1, "updated");
assert x1.name == "some name";
assert y1.name == "updated";

let x2 = {title: "a", name: 42};
let y2 = named(x2, "updated");
assert x2.name == 42;
assert y2.name == "updated";

let x3 = {title: "a", name: "hello"};
let y3 = named(x3, 42);
assert x3.name == "hello";
assert y3.name == 42;


let incrX = \r -> {..r, x: r.x+1};
let point1 = {y: 1, x: 0};
let point2 = incrX(point1);
let point3 = incrX(point2);

assert point1 == {y: 1, x: 0};
assert point2 == {y: 1, x: 1};
assert point3 == {y: 1, x: 2};
