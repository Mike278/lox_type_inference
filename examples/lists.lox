let fold = \list, state, fn ->
    List.empty(list)
        ? state
        : fold(
            List.rest(list),
            fn(state, List.first(list)),
            fn
        );


let map = \list, fn ->
    fold(list, [], \state, element -> [..state, fn(element)]);

let reduce = \list, fn ->
    fold(list, List.first(list), fn);

let reverse = \list ->
    fold(list, [], \state, element -> [element, ..state]);

let xs = [1, 2, 3];
print xs;
print reverse(xs);

let ys = [];
print ys;

let zs = [1];
print zs;

let mixed = [1, {two: "three"}];
print mixed;



print map([1,2,3], \x -> x == 1);
print map(mixed, \x -> x == 1);


let employees = [
    {name: "mike", age: 30},
    {name: "jane", age: 60},
    {name: "joe", age: 50}
];

let employeeWithMaxAge = reduce(
    employees,
    \highest, employee ->
        employee.age > highest.age
            ? employee
            : highest
);
print employeeWithMaxAge;

let maxAge = reduce(
    map(employees, \e -> e.age),
    \highest, age -> age > highest ? age : highest
);
print maxAge;

let max = \x, y -> x > y ? x : y;
let min = \x, y -> x < y ? x : y;

print employees
    \> map(_, \e -> e.age)
    \> reduce(_, max)
;

print employees
    \> map(_, \e -> e.age)
    \> reduce(_, min)
;

print employees \> List.first;

let sub = \x, y -> x-y;
let id = \x -> x;

let oneMinusX = sub(1, _);
let xMinusOne = sub(_, 1);

print oneMinusX(3);
print xMinusOne(3);

print "[1] \> List.first \> id";
print [1] \> List.first \> id;

print "1 \> xMinusOne \> xMinusOne";
print 1 \> xMinusOne \> xMinusOne;

print "[1] \> List.first \> id \> sub(_, 1)";
print [1] \> List.first \> id \> sub(_, 1);

print (\list, item -> [..list, item])([], false);
print (\list, item -> [..list, item])(_, false)([]);
