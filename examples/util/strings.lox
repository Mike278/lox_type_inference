let { fold, join, elements, try_map } = import "lists.lox";
let { try } = import "functions.lox";

let split = \{separator} -> \str -> String.split(str, separator);

let split_at = \{separator} -> \str {
    let { first, rest } = str
      |> split({separator})
      |> elements
      ?? return .err(.separator_not_found);
    return .ok({
      before: first,
      after: rest |> join,
    });
};

let as_digit = \str ->
    if str == "0" then .ok(0) else
    if str == "1" then .ok(1) else
    if str == "2" then .ok(2) else
    if str == "3" then .ok(3) else
    if str == "4" then .ok(4) else
    if str == "5" then .ok(5) else
    if str == "6" then .ok(6) else
    if str == "7" then .ok(7) else
    if str == "8" then .ok(8) else
    if str == "9" then .ok(9) else
    .err(.invalid_digit(str));

let parse_int = \str -> str
  |> split({separator: ""})
  |> try_map(as_digit)
  |> try(fold(0, \number, digit -> number * 10 + digit));
