let { fold, join, elements, map } = import "lists.lox";

let split = \{separator} -> \str -> String.split(str, separator);

let split_at = \{separator} -> \str {
    let { first, rest } = str
      \> split({separator})
      \> elements
      ?? return .err(.separator_not_found);
    return .ok({
      before: first,
      after: rest \> join,
    });
};

let as_digit = \str ->
    str == "0" ? .ok(0) :
    str == "1" ? .ok(1) :
    str == "2" ? .ok(2) :
    str == "3" ? .ok(3) :
    str == "4" ? .ok(4) :
    str == "5" ? .ok(5) :
    str == "6" ? .ok(6) :
    str == "7" ? .ok(7) :
    str == "8" ? .ok(8) :
    str == "9" ? .ok(9) :
    .err(.invalid_digit(str));

let parse_int = \str -> str
  \> split({separator: ""})
  \> map(as_digit)
  \> fold(
    .ok(0),
    \number, digit -> .ok(number! * 10 + digit!)
  );
