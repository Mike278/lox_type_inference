let {fold, count_where, zip, sort, sum, first, rest} = import "util/lists.lox";
let {abs_diff} = import "util/numeric.lox";
let {eq} = import "util/functions.lox";

let input = [
    [3, 4],
    [4, 3],
    [2, 5],
    [1, 3],
    [3, 9],
    [3, 3]
];

let { list1, list2 } = fold(
    input,
    {list1: [], list2: []},
    \state, pair -> {
        list1: [..state.list1, pair \> first],
        list2: [..state.list2, pair \> rest \> first],
    }
);
print list1;
print list2;

/////// Part 1 ///////

let answer1 = zip(
  list1 \> sort,
  list2 \> sort,
  abs_diff
) \> sum;

assert answer1 == 11;

/////// Part 2 ///////

let frequency_of_number_in_list2 = \n ->
    list2 \> count_where(_, n \> eq);

let answer2 = list1 \> fold(_, 0, \running, n {
    let value = n * frequency_of_number_in_list2(n);
    return running + value;
});

assert answer2 == 31;