let {fold, try_fold, count_where, zip, sort, sum, elements, element_at} = import "util/lists.lox";
let {abs_diff} = import "util/numeric.lox";
let {eq} = import "util/functions.lox";

let input = [
    [3, 4],
    [4, 3],
    [2, 5],
    [1, 3],
    [3, 9],
    [3, 3]
];

let initial = {list1: [], list2: []};
let {list1, list2} = input \> try_fold(
    initial,
    \state, pair {
      let {list1, list2} = state;
      let left = pair \> element_at(0);
      let right = pair \> element_at(1);
      return .ok({
        list1: [..list1, left!],
        list2: [..list2, right!],
      });
    }
) ?? initial;

print list1;
print list2;

/////// Part 1 ///////

let answer1 = zip(
  list1 \> sort,
  list2 \> sort,
  abs_diff
) \> sum;

assert answer1 == .ok(11);

/////// Part 2 ///////

let frequency_of_number_in_list2 = \n ->
    list2 \> count_where(n \> eq);

let answer2 = list1 \> fold(0, \running, n {
    let value = n * frequency_of_number_in_list2(n);
    return running + value;
});

assert answer2 == 31;